// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  history: (where?: HistoryWhereInput) => Promise<boolean>;
  kanji: (where?: KanjiWhereInput) => Promise<boolean>;
  kun: (where?: KunWhereInput) => Promise<boolean>;
  kunRomaji: (where?: KunRomajiWhereInput) => Promise<boolean>;
  meaning: (where?: MeaningWhereInput) => Promise<boolean>;
  on: (where?: OnWhereInput) => Promise<boolean>;
  onRomaji: (where?: OnRomajiWhereInput) => Promise<boolean>;
  word: (where?: WordWhereInput) => Promise<boolean>;
  wordExample: (where?: WordExampleWhereInput) => Promise<boolean>;
  wordUsage: (where?: WordUsageWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  history: (where: HistoryWhereUniqueInput) => HistoryNullablePromise;
  histories: (args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<History>;
  historiesConnection: (args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HistoryConnectionPromise;
  kanji: (where: KanjiWhereUniqueInput) => KanjiNullablePromise;
  kanjis: (args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Kanji>;
  kanjisConnection: (args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KanjiConnectionPromise;
  kun: (where: KunWhereUniqueInput) => KunNullablePromise;
  kuns: (args?: {
    where?: KunWhereInput;
    orderBy?: KunOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Kun>;
  kunsConnection: (args?: {
    where?: KunWhereInput;
    orderBy?: KunOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KunConnectionPromise;
  kunRomaji: (where: KunRomajiWhereUniqueInput) => KunRomajiNullablePromise;
  kunRomajis: (args?: {
    where?: KunRomajiWhereInput;
    orderBy?: KunRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<KunRomaji>;
  kunRomajisConnection: (args?: {
    where?: KunRomajiWhereInput;
    orderBy?: KunRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KunRomajiConnectionPromise;
  meaning: (where: MeaningWhereUniqueInput) => MeaningNullablePromise;
  meanings: (args?: {
    where?: MeaningWhereInput;
    orderBy?: MeaningOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meaning>;
  meaningsConnection: (args?: {
    where?: MeaningWhereInput;
    orderBy?: MeaningOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeaningConnectionPromise;
  on: (where: OnWhereUniqueInput) => OnNullablePromise;
  ons: (args?: {
    where?: OnWhereInput;
    orderBy?: OnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<On>;
  onsConnection: (args?: {
    where?: OnWhereInput;
    orderBy?: OnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OnConnectionPromise;
  onRomaji: (where: OnRomajiWhereUniqueInput) => OnRomajiNullablePromise;
  onRomajis: (args?: {
    where?: OnRomajiWhereInput;
    orderBy?: OnRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OnRomaji>;
  onRomajisConnection: (args?: {
    where?: OnRomajiWhereInput;
    orderBy?: OnRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OnRomajiConnectionPromise;
  word: (where: WordWhereUniqueInput) => WordNullablePromise;
  words: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Word>;
  wordsConnection: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordConnectionPromise;
  wordExample: (
    where: WordExampleWhereUniqueInput
  ) => WordExampleNullablePromise;
  wordExamples: (args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WordExample>;
  wordExamplesConnection: (args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordExampleConnectionPromise;
  wordUsage: (where: WordUsageWhereUniqueInput) => WordUsageNullablePromise;
  wordUsages: (args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WordUsage>;
  wordUsagesConnection: (args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordUsageConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createHistory: (data: HistoryCreateInput) => HistoryPromise;
  updateHistory: (args: {
    data: HistoryUpdateInput;
    where: HistoryWhereUniqueInput;
  }) => HistoryPromise;
  updateManyHistories: (args: {
    data: HistoryUpdateManyMutationInput;
    where?: HistoryWhereInput;
  }) => BatchPayloadPromise;
  upsertHistory: (args: {
    where: HistoryWhereUniqueInput;
    create: HistoryCreateInput;
    update: HistoryUpdateInput;
  }) => HistoryPromise;
  deleteHistory: (where: HistoryWhereUniqueInput) => HistoryPromise;
  deleteManyHistories: (where?: HistoryWhereInput) => BatchPayloadPromise;
  createKanji: (data: KanjiCreateInput) => KanjiPromise;
  updateKanji: (args: {
    data: KanjiUpdateInput;
    where: KanjiWhereUniqueInput;
  }) => KanjiPromise;
  updateManyKanjis: (args: {
    data: KanjiUpdateManyMutationInput;
    where?: KanjiWhereInput;
  }) => BatchPayloadPromise;
  upsertKanji: (args: {
    where: KanjiWhereUniqueInput;
    create: KanjiCreateInput;
    update: KanjiUpdateInput;
  }) => KanjiPromise;
  deleteKanji: (where: KanjiWhereUniqueInput) => KanjiPromise;
  deleteManyKanjis: (where?: KanjiWhereInput) => BatchPayloadPromise;
  createKun: (data: KunCreateInput) => KunPromise;
  updateKun: (args: {
    data: KunUpdateInput;
    where: KunWhereUniqueInput;
  }) => KunPromise;
  updateManyKuns: (args: {
    data: KunUpdateManyMutationInput;
    where?: KunWhereInput;
  }) => BatchPayloadPromise;
  upsertKun: (args: {
    where: KunWhereUniqueInput;
    create: KunCreateInput;
    update: KunUpdateInput;
  }) => KunPromise;
  deleteKun: (where: KunWhereUniqueInput) => KunPromise;
  deleteManyKuns: (where?: KunWhereInput) => BatchPayloadPromise;
  createKunRomaji: (data: KunRomajiCreateInput) => KunRomajiPromise;
  updateKunRomaji: (args: {
    data: KunRomajiUpdateInput;
    where: KunRomajiWhereUniqueInput;
  }) => KunRomajiPromise;
  updateManyKunRomajis: (args: {
    data: KunRomajiUpdateManyMutationInput;
    where?: KunRomajiWhereInput;
  }) => BatchPayloadPromise;
  upsertKunRomaji: (args: {
    where: KunRomajiWhereUniqueInput;
    create: KunRomajiCreateInput;
    update: KunRomajiUpdateInput;
  }) => KunRomajiPromise;
  deleteKunRomaji: (where: KunRomajiWhereUniqueInput) => KunRomajiPromise;
  deleteManyKunRomajis: (where?: KunRomajiWhereInput) => BatchPayloadPromise;
  createMeaning: (data: MeaningCreateInput) => MeaningPromise;
  updateMeaning: (args: {
    data: MeaningUpdateInput;
    where: MeaningWhereUniqueInput;
  }) => MeaningPromise;
  updateManyMeanings: (args: {
    data: MeaningUpdateManyMutationInput;
    where?: MeaningWhereInput;
  }) => BatchPayloadPromise;
  upsertMeaning: (args: {
    where: MeaningWhereUniqueInput;
    create: MeaningCreateInput;
    update: MeaningUpdateInput;
  }) => MeaningPromise;
  deleteMeaning: (where: MeaningWhereUniqueInput) => MeaningPromise;
  deleteManyMeanings: (where?: MeaningWhereInput) => BatchPayloadPromise;
  createOn: (data: OnCreateInput) => OnPromise;
  updateOn: (args: {
    data: OnUpdateInput;
    where: OnWhereUniqueInput;
  }) => OnPromise;
  updateManyOns: (args: {
    data: OnUpdateManyMutationInput;
    where?: OnWhereInput;
  }) => BatchPayloadPromise;
  upsertOn: (args: {
    where: OnWhereUniqueInput;
    create: OnCreateInput;
    update: OnUpdateInput;
  }) => OnPromise;
  deleteOn: (where: OnWhereUniqueInput) => OnPromise;
  deleteManyOns: (where?: OnWhereInput) => BatchPayloadPromise;
  createOnRomaji: (data: OnRomajiCreateInput) => OnRomajiPromise;
  updateOnRomaji: (args: {
    data: OnRomajiUpdateInput;
    where: OnRomajiWhereUniqueInput;
  }) => OnRomajiPromise;
  updateManyOnRomajis: (args: {
    data: OnRomajiUpdateManyMutationInput;
    where?: OnRomajiWhereInput;
  }) => BatchPayloadPromise;
  upsertOnRomaji: (args: {
    where: OnRomajiWhereUniqueInput;
    create: OnRomajiCreateInput;
    update: OnRomajiUpdateInput;
  }) => OnRomajiPromise;
  deleteOnRomaji: (where: OnRomajiWhereUniqueInput) => OnRomajiPromise;
  deleteManyOnRomajis: (where?: OnRomajiWhereInput) => BatchPayloadPromise;
  createWord: (data: WordCreateInput) => WordPromise;
  updateWord: (args: {
    data: WordUpdateInput;
    where: WordWhereUniqueInput;
  }) => WordPromise;
  updateManyWords: (args: {
    data: WordUpdateManyMutationInput;
    where?: WordWhereInput;
  }) => BatchPayloadPromise;
  upsertWord: (args: {
    where: WordWhereUniqueInput;
    create: WordCreateInput;
    update: WordUpdateInput;
  }) => WordPromise;
  deleteWord: (where: WordWhereUniqueInput) => WordPromise;
  deleteManyWords: (where?: WordWhereInput) => BatchPayloadPromise;
  createWordExample: (data: WordExampleCreateInput) => WordExamplePromise;
  updateWordExample: (args: {
    data: WordExampleUpdateInput;
    where: WordExampleWhereUniqueInput;
  }) => WordExamplePromise;
  updateManyWordExamples: (args: {
    data: WordExampleUpdateManyMutationInput;
    where?: WordExampleWhereInput;
  }) => BatchPayloadPromise;
  upsertWordExample: (args: {
    where: WordExampleWhereUniqueInput;
    create: WordExampleCreateInput;
    update: WordExampleUpdateInput;
  }) => WordExamplePromise;
  deleteWordExample: (where: WordExampleWhereUniqueInput) => WordExamplePromise;
  deleteManyWordExamples: (
    where?: WordExampleWhereInput
  ) => BatchPayloadPromise;
  createWordUsage: (data: WordUsageCreateInput) => WordUsagePromise;
  updateWordUsage: (args: {
    data: WordUsageUpdateInput;
    where: WordUsageWhereUniqueInput;
  }) => WordUsagePromise;
  updateManyWordUsages: (args: {
    data: WordUsageUpdateManyMutationInput;
    where?: WordUsageWhereInput;
  }) => BatchPayloadPromise;
  upsertWordUsage: (args: {
    where: WordUsageWhereUniqueInput;
    create: WordUsageCreateInput;
    update: WordUsageUpdateInput;
  }) => WordUsagePromise;
  deleteWordUsage: (where: WordUsageWhereUniqueInput) => WordUsagePromise;
  deleteManyWordUsages: (where?: WordUsageWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  history: (
    where?: HistorySubscriptionWhereInput
  ) => HistorySubscriptionPayloadSubscription;
  kanji: (
    where?: KanjiSubscriptionWhereInput
  ) => KanjiSubscriptionPayloadSubscription;
  kun: (
    where?: KunSubscriptionWhereInput
  ) => KunSubscriptionPayloadSubscription;
  kunRomaji: (
    where?: KunRomajiSubscriptionWhereInput
  ) => KunRomajiSubscriptionPayloadSubscription;
  meaning: (
    where?: MeaningSubscriptionWhereInput
  ) => MeaningSubscriptionPayloadSubscription;
  on: (where?: OnSubscriptionWhereInput) => OnSubscriptionPayloadSubscription;
  onRomaji: (
    where?: OnRomajiSubscriptionWhereInput
  ) => OnRomajiSubscriptionPayloadSubscription;
  word: (
    where?: WordSubscriptionWhereInput
  ) => WordSubscriptionPayloadSubscription;
  wordExample: (
    where?: WordExampleSubscriptionWhereInput
  ) => WordExampleSubscriptionPayloadSubscription;
  wordUsage: (
    where?: WordUsageSubscriptionWhereInput
  ) => WordUsageSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type HistoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "author_ASC"
  | "author_DESC"
  | "origin_ASC"
  | "origin_DESC"
  | "usage_ASC"
  | "usage_DESC"
  | "newTranslation_ASC"
  | "newTranslation_DESC"
  | "time_ASC"
  | "time_DESC";

export type MeaningOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "meaning_ASC"
  | "meaning_DESC";

export type OnOrderByInput = "id_ASC" | "id_DESC" | "on_ASC" | "on_DESC";

export type OnRomajiOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "onRomaji_ASC"
  | "onRomaji_DESC";

export type KunOrderByInput = "id_ASC" | "id_DESC" | "kun_ASC" | "kun_DESC";

export type KunRomajiOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "kunRomaji_ASC"
  | "kunRomaji_DESC";

export type KanjiOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "writing_ASC"
  | "writing_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "jlpt_ASC"
  | "jlpt_DESC"
  | "strokes_ASC"
  | "strokes_DESC"
  | "origin_ASC"
  | "origin_DESC"
  | "memo_ASC"
  | "memo_DESC";

export type WordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "writing_ASC"
  | "writing_DESC"
  | "romaji_ASC"
  | "romaji_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "hiragana_ASC"
  | "hiragana_DESC";

export type WordExampleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "original_ASC"
  | "original_DESC"
  | "translation_ASC"
  | "translation_DESC";

export type WordUsageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "question_ASC"
  | "question_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type HistoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HistoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  usage?: Maybe<String>;
  usage_not?: Maybe<String>;
  usage_in?: Maybe<String[] | String>;
  usage_not_in?: Maybe<String[] | String>;
  usage_lt?: Maybe<String>;
  usage_lte?: Maybe<String>;
  usage_gt?: Maybe<String>;
  usage_gte?: Maybe<String>;
  usage_contains?: Maybe<String>;
  usage_not_contains?: Maybe<String>;
  usage_starts_with?: Maybe<String>;
  usage_not_starts_with?: Maybe<String>;
  usage_ends_with?: Maybe<String>;
  usage_not_ends_with?: Maybe<String>;
  newTranslation?: Maybe<String>;
  newTranslation_not?: Maybe<String>;
  newTranslation_in?: Maybe<String[] | String>;
  newTranslation_not_in?: Maybe<String[] | String>;
  newTranslation_lt?: Maybe<String>;
  newTranslation_lte?: Maybe<String>;
  newTranslation_gt?: Maybe<String>;
  newTranslation_gte?: Maybe<String>;
  newTranslation_contains?: Maybe<String>;
  newTranslation_not_contains?: Maybe<String>;
  newTranslation_starts_with?: Maybe<String>;
  newTranslation_not_starts_with?: Maybe<String>;
  newTranslation_ends_with?: Maybe<String>;
  newTranslation_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  AND?: Maybe<HistoryWhereInput[] | HistoryWhereInput>;
  OR?: Maybe<HistoryWhereInput[] | HistoryWhereInput>;
  NOT?: Maybe<HistoryWhereInput[] | HistoryWhereInput>;
}

export type KanjiWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MeaningWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  meaning?: Maybe<String>;
  meaning_not?: Maybe<String>;
  meaning_in?: Maybe<String[] | String>;
  meaning_not_in?: Maybe<String[] | String>;
  meaning_lt?: Maybe<String>;
  meaning_lte?: Maybe<String>;
  meaning_gt?: Maybe<String>;
  meaning_gte?: Maybe<String>;
  meaning_contains?: Maybe<String>;
  meaning_not_contains?: Maybe<String>;
  meaning_starts_with?: Maybe<String>;
  meaning_not_starts_with?: Maybe<String>;
  meaning_ends_with?: Maybe<String>;
  meaning_not_ends_with?: Maybe<String>;
  AND?: Maybe<MeaningWhereInput[] | MeaningWhereInput>;
  OR?: Maybe<MeaningWhereInput[] | MeaningWhereInput>;
  NOT?: Maybe<MeaningWhereInput[] | MeaningWhereInput>;
}

export interface OnWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  on?: Maybe<String>;
  on_not?: Maybe<String>;
  on_in?: Maybe<String[] | String>;
  on_not_in?: Maybe<String[] | String>;
  on_lt?: Maybe<String>;
  on_lte?: Maybe<String>;
  on_gt?: Maybe<String>;
  on_gte?: Maybe<String>;
  on_contains?: Maybe<String>;
  on_not_contains?: Maybe<String>;
  on_starts_with?: Maybe<String>;
  on_not_starts_with?: Maybe<String>;
  on_ends_with?: Maybe<String>;
  on_not_ends_with?: Maybe<String>;
  AND?: Maybe<OnWhereInput[] | OnWhereInput>;
  OR?: Maybe<OnWhereInput[] | OnWhereInput>;
  NOT?: Maybe<OnWhereInput[] | OnWhereInput>;
}

export interface OnRomajiWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  onRomaji?: Maybe<String>;
  onRomaji_not?: Maybe<String>;
  onRomaji_in?: Maybe<String[] | String>;
  onRomaji_not_in?: Maybe<String[] | String>;
  onRomaji_lt?: Maybe<String>;
  onRomaji_lte?: Maybe<String>;
  onRomaji_gt?: Maybe<String>;
  onRomaji_gte?: Maybe<String>;
  onRomaji_contains?: Maybe<String>;
  onRomaji_not_contains?: Maybe<String>;
  onRomaji_starts_with?: Maybe<String>;
  onRomaji_not_starts_with?: Maybe<String>;
  onRomaji_ends_with?: Maybe<String>;
  onRomaji_not_ends_with?: Maybe<String>;
  AND?: Maybe<OnRomajiWhereInput[] | OnRomajiWhereInput>;
  OR?: Maybe<OnRomajiWhereInput[] | OnRomajiWhereInput>;
  NOT?: Maybe<OnRomajiWhereInput[] | OnRomajiWhereInput>;
}

export interface KunWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  kun?: Maybe<String>;
  kun_not?: Maybe<String>;
  kun_in?: Maybe<String[] | String>;
  kun_not_in?: Maybe<String[] | String>;
  kun_lt?: Maybe<String>;
  kun_lte?: Maybe<String>;
  kun_gt?: Maybe<String>;
  kun_gte?: Maybe<String>;
  kun_contains?: Maybe<String>;
  kun_not_contains?: Maybe<String>;
  kun_starts_with?: Maybe<String>;
  kun_not_starts_with?: Maybe<String>;
  kun_ends_with?: Maybe<String>;
  kun_not_ends_with?: Maybe<String>;
  AND?: Maybe<KunWhereInput[] | KunWhereInput>;
  OR?: Maybe<KunWhereInput[] | KunWhereInput>;
  NOT?: Maybe<KunWhereInput[] | KunWhereInput>;
}

export interface KunRomajiWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  kunRomaji?: Maybe<String>;
  kunRomaji_not?: Maybe<String>;
  kunRomaji_in?: Maybe<String[] | String>;
  kunRomaji_not_in?: Maybe<String[] | String>;
  kunRomaji_lt?: Maybe<String>;
  kunRomaji_lte?: Maybe<String>;
  kunRomaji_gt?: Maybe<String>;
  kunRomaji_gte?: Maybe<String>;
  kunRomaji_contains?: Maybe<String>;
  kunRomaji_not_contains?: Maybe<String>;
  kunRomaji_starts_with?: Maybe<String>;
  kunRomaji_not_starts_with?: Maybe<String>;
  kunRomaji_ends_with?: Maybe<String>;
  kunRomaji_not_ends_with?: Maybe<String>;
  AND?: Maybe<KunRomajiWhereInput[] | KunRomajiWhereInput>;
  OR?: Maybe<KunRomajiWhereInput[] | KunRomajiWhereInput>;
  NOT?: Maybe<KunRomajiWhereInput[] | KunRomajiWhereInput>;
}

export interface KanjiWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  meaning_every?: Maybe<MeaningWhereInput>;
  meaning_some?: Maybe<MeaningWhereInput>;
  meaning_none?: Maybe<MeaningWhereInput>;
  on_every?: Maybe<OnWhereInput>;
  on_some?: Maybe<OnWhereInput>;
  on_none?: Maybe<OnWhereInput>;
  onRomaji_every?: Maybe<OnRomajiWhereInput>;
  onRomaji_some?: Maybe<OnRomajiWhereInput>;
  onRomaji_none?: Maybe<OnRomajiWhereInput>;
  kun_every?: Maybe<KunWhereInput>;
  kun_some?: Maybe<KunWhereInput>;
  kun_none?: Maybe<KunWhereInput>;
  kunRomaji_every?: Maybe<KunRomajiWhereInput>;
  kunRomaji_some?: Maybe<KunRomajiWhereInput>;
  kunRomaji_none?: Maybe<KunRomajiWhereInput>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  jlpt?: Maybe<Int>;
  jlpt_not?: Maybe<Int>;
  jlpt_in?: Maybe<Int[] | Int>;
  jlpt_not_in?: Maybe<Int[] | Int>;
  jlpt_lt?: Maybe<Int>;
  jlpt_lte?: Maybe<Int>;
  jlpt_gt?: Maybe<Int>;
  jlpt_gte?: Maybe<Int>;
  strokes?: Maybe<Int>;
  strokes_not?: Maybe<Int>;
  strokes_in?: Maybe<Int[] | Int>;
  strokes_not_in?: Maybe<Int[] | Int>;
  strokes_lt?: Maybe<Int>;
  strokes_lte?: Maybe<Int>;
  strokes_gt?: Maybe<Int>;
  strokes_gte?: Maybe<Int>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  old_every?: Maybe<KanjiWhereInput>;
  old_some?: Maybe<KanjiWhereInput>;
  old_none?: Maybe<KanjiWhereInput>;
  modern_every?: Maybe<KanjiWhereInput>;
  modern_some?: Maybe<KanjiWhereInput>;
  modern_none?: Maybe<KanjiWhereInput>;
  memo?: Maybe<String>;
  memo_not?: Maybe<String>;
  memo_in?: Maybe<String[] | String>;
  memo_not_in?: Maybe<String[] | String>;
  memo_lt?: Maybe<String>;
  memo_lte?: Maybe<String>;
  memo_gt?: Maybe<String>;
  memo_gte?: Maybe<String>;
  memo_contains?: Maybe<String>;
  memo_not_contains?: Maybe<String>;
  memo_starts_with?: Maybe<String>;
  memo_not_starts_with?: Maybe<String>;
  memo_ends_with?: Maybe<String>;
  memo_not_ends_with?: Maybe<String>;
  usageFirst_every?: Maybe<WordWhereInput>;
  usageFirst_some?: Maybe<WordWhereInput>;
  usageFirst_none?: Maybe<WordWhereInput>;
  usageLast_every?: Maybe<WordWhereInput>;
  usageLast_some?: Maybe<WordWhereInput>;
  usageLast_none?: Maybe<WordWhereInput>;
  radicals_every?: Maybe<KanjiWhereInput>;
  radicals_some?: Maybe<KanjiWhereInput>;
  radicals_none?: Maybe<KanjiWhereInput>;
  phonetics_every?: Maybe<KanjiWhereInput>;
  phonetics_some?: Maybe<KanjiWhereInput>;
  phonetics_none?: Maybe<KanjiWhereInput>;
  AND?: Maybe<KanjiWhereInput[] | KanjiWhereInput>;
  OR?: Maybe<KanjiWhereInput[] | KanjiWhereInput>;
  NOT?: Maybe<KanjiWhereInput[] | KanjiWhereInput>;
}

export interface WordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  synonims_every?: Maybe<WordWhereInput>;
  synonims_some?: Maybe<WordWhereInput>;
  synonims_none?: Maybe<WordWhereInput>;
  romaji?: Maybe<String>;
  romaji_not?: Maybe<String>;
  romaji_in?: Maybe<String[] | String>;
  romaji_not_in?: Maybe<String[] | String>;
  romaji_lt?: Maybe<String>;
  romaji_lte?: Maybe<String>;
  romaji_gt?: Maybe<String>;
  romaji_gte?: Maybe<String>;
  romaji_contains?: Maybe<String>;
  romaji_not_contains?: Maybe<String>;
  romaji_starts_with?: Maybe<String>;
  romaji_not_starts_with?: Maybe<String>;
  romaji_ends_with?: Maybe<String>;
  romaji_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  kanji_every?: Maybe<KanjiWhereInput>;
  kanji_some?: Maybe<KanjiWhereInput>;
  kanji_none?: Maybe<KanjiWhereInput>;
  patterns_every?: Maybe<WordExampleWhereInput>;
  patterns_some?: Maybe<WordExampleWhereInput>;
  patterns_none?: Maybe<WordExampleWhereInput>;
  antipatterns_every?: Maybe<WordExampleWhereInput>;
  antipatterns_some?: Maybe<WordExampleWhereInput>;
  antipatterns_none?: Maybe<WordExampleWhereInput>;
  hiragana?: Maybe<String>;
  hiragana_not?: Maybe<String>;
  hiragana_in?: Maybe<String[] | String>;
  hiragana_not_in?: Maybe<String[] | String>;
  hiragana_lt?: Maybe<String>;
  hiragana_lte?: Maybe<String>;
  hiragana_gt?: Maybe<String>;
  hiragana_gte?: Maybe<String>;
  hiragana_contains?: Maybe<String>;
  hiragana_not_contains?: Maybe<String>;
  hiragana_starts_with?: Maybe<String>;
  hiragana_not_starts_with?: Maybe<String>;
  hiragana_ends_with?: Maybe<String>;
  hiragana_not_ends_with?: Maybe<String>;
  usage_every?: Maybe<WordUsageWhereInput>;
  usage_some?: Maybe<WordUsageWhereInput>;
  usage_none?: Maybe<WordUsageWhereInput>;
  usageMeaning_every?: Maybe<WordUsageWhereInput>;
  usageMeaning_some?: Maybe<WordUsageWhereInput>;
  usageMeaning_none?: Maybe<WordUsageWhereInput>;
  usageDifference_every?: Maybe<WordUsageWhereInput>;
  usageDifference_some?: Maybe<WordUsageWhereInput>;
  usageDifference_none?: Maybe<WordUsageWhereInput>;
  usageWatsay_every?: Maybe<WordUsageWhereInput>;
  usageWatsay_some?: Maybe<WordUsageWhereInput>;
  usageWatsay_none?: Maybe<WordUsageWhereInput>;
  usageOther_every?: Maybe<WordUsageWhereInput>;
  usageOther_some?: Maybe<WordUsageWhereInput>;
  usageOther_none?: Maybe<WordUsageWhereInput>;
  updateHistory_every?: Maybe<HistoryWhereInput>;
  updateHistory_some?: Maybe<HistoryWhereInput>;
  updateHistory_none?: Maybe<HistoryWhereInput>;
  AND?: Maybe<WordWhereInput[] | WordWhereInput>;
  OR?: Maybe<WordWhereInput[] | WordWhereInput>;
  NOT?: Maybe<WordWhereInput[] | WordWhereInput>;
}

export interface WordExampleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  original?: Maybe<String>;
  original_not?: Maybe<String>;
  original_in?: Maybe<String[] | String>;
  original_not_in?: Maybe<String[] | String>;
  original_lt?: Maybe<String>;
  original_lte?: Maybe<String>;
  original_gt?: Maybe<String>;
  original_gte?: Maybe<String>;
  original_contains?: Maybe<String>;
  original_not_contains?: Maybe<String>;
  original_starts_with?: Maybe<String>;
  original_not_starts_with?: Maybe<String>;
  original_ends_with?: Maybe<String>;
  original_not_ends_with?: Maybe<String>;
  translation?: Maybe<String>;
  translation_not?: Maybe<String>;
  translation_in?: Maybe<String[] | String>;
  translation_not_in?: Maybe<String[] | String>;
  translation_lt?: Maybe<String>;
  translation_lte?: Maybe<String>;
  translation_gt?: Maybe<String>;
  translation_gte?: Maybe<String>;
  translation_contains?: Maybe<String>;
  translation_not_contains?: Maybe<String>;
  translation_starts_with?: Maybe<String>;
  translation_not_starts_with?: Maybe<String>;
  translation_ends_with?: Maybe<String>;
  translation_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordExampleWhereInput[] | WordExampleWhereInput>;
  OR?: Maybe<WordExampleWhereInput[] | WordExampleWhereInput>;
  NOT?: Maybe<WordExampleWhereInput[] | WordExampleWhereInput>;
}

export interface WordUsageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordUsageWhereInput[] | WordUsageWhereInput>;
  OR?: Maybe<WordUsageWhereInput[] | WordUsageWhereInput>;
  NOT?: Maybe<WordUsageWhereInput[] | WordUsageWhereInput>;
}

export type KunWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type KunRomajiWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MeaningWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OnWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OnRomajiWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WordExampleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WordUsageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HistoryCreateInput {
  id?: Maybe<ID_Input>;
  author: String;
  origin: String;
  usage: String;
  newTranslation: String;
  time: String;
}

export interface HistoryUpdateInput {
  author?: Maybe<String>;
  origin?: Maybe<String>;
  usage?: Maybe<String>;
  newTranslation?: Maybe<String>;
  time?: Maybe<String>;
}

export interface HistoryUpdateManyMutationInput {
  author?: Maybe<String>;
  origin?: Maybe<String>;
  usage?: Maybe<String>;
  newTranslation?: Maybe<String>;
  time?: Maybe<String>;
}

export interface KanjiCreateInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<MeaningCreateManyInput>;
  on?: Maybe<OnCreateManyInput>;
  onRomaji?: Maybe<OnRomajiCreateManyInput>;
  kun?: Maybe<KunCreateManyInput>;
  kunRomaji?: Maybe<KunRomajiCreateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface MeaningCreateManyInput {
  create?: Maybe<MeaningCreateInput[] | MeaningCreateInput>;
  connect?: Maybe<MeaningWhereUniqueInput[] | MeaningWhereUniqueInput>;
}

export interface MeaningCreateInput {
  id?: Maybe<ID_Input>;
  meaning: String;
}

export interface OnCreateManyInput {
  create?: Maybe<OnCreateInput[] | OnCreateInput>;
  connect?: Maybe<OnWhereUniqueInput[] | OnWhereUniqueInput>;
}

export interface OnCreateInput {
  id?: Maybe<ID_Input>;
  on: String;
}

export interface OnRomajiCreateManyInput {
  create?: Maybe<OnRomajiCreateInput[] | OnRomajiCreateInput>;
  connect?: Maybe<OnRomajiWhereUniqueInput[] | OnRomajiWhereUniqueInput>;
}

export interface OnRomajiCreateInput {
  id?: Maybe<ID_Input>;
  onRomaji: String;
}

export interface KunCreateManyInput {
  create?: Maybe<KunCreateInput[] | KunCreateInput>;
  connect?: Maybe<KunWhereUniqueInput[] | KunWhereUniqueInput>;
}

export interface KunCreateInput {
  id?: Maybe<ID_Input>;
  kun: String;
}

export interface KunRomajiCreateManyInput {
  create?: Maybe<KunRomajiCreateInput[] | KunRomajiCreateInput>;
  connect?: Maybe<KunRomajiWhereUniqueInput[] | KunRomajiWhereUniqueInput>;
}

export interface KunRomajiCreateInput {
  id?: Maybe<ID_Input>;
  kunRomaji: String;
}

export interface KanjiCreateManyWithoutOldInput {
  create?: Maybe<KanjiCreateWithoutOldInput[] | KanjiCreateWithoutOldInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutOldInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<MeaningCreateManyInput>;
  on?: Maybe<OnCreateManyInput>;
  onRomaji?: Maybe<OnRomajiCreateManyInput>;
  kun?: Maybe<KunCreateManyInput>;
  kunRomaji?: Maybe<KunRomajiCreateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface KanjiCreateManyWithoutModernInput {
  create?: Maybe<
    KanjiCreateWithoutModernInput[] | KanjiCreateWithoutModernInput
  >;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutModernInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<MeaningCreateManyInput>;
  on?: Maybe<OnCreateManyInput>;
  onRomaji?: Maybe<OnRomajiCreateManyInput>;
  kun?: Maybe<KunCreateManyInput>;
  kunRomaji?: Maybe<KunRomajiCreateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface WordCreateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
}

export interface WordCreateInput {
  id?: Maybe<ID_Input>;
  translation?: Maybe<WordCreatetranslationInput>;
  writing: String;
  synonims?: Maybe<WordCreateManyInput>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  kanji?: Maybe<KanjiCreateManyInput>;
  patterns?: Maybe<WordExampleCreateManyInput>;
  antipatterns?: Maybe<WordExampleCreateManyInput>;
  hiragana?: Maybe<String>;
  usage?: Maybe<WordUsageCreateManyInput>;
  usageMeaning?: Maybe<WordUsageCreateManyInput>;
  usageDifference?: Maybe<WordUsageCreateManyInput>;
  usageWatsay?: Maybe<WordUsageCreateManyInput>;
  usageOther?: Maybe<WordUsageCreateManyInput>;
  updateHistory?: Maybe<HistoryCreateManyInput>;
}

export interface WordCreatetranslationInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreateManyInput {
  create?: Maybe<KanjiCreateInput[] | KanjiCreateInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface WordExampleCreateManyInput {
  create?: Maybe<WordExampleCreateInput[] | WordExampleCreateInput>;
  connect?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
}

export interface WordExampleCreateInput {
  id?: Maybe<ID_Input>;
  original: String;
  translation: String;
}

export interface WordUsageCreateManyInput {
  create?: Maybe<WordUsageCreateInput[] | WordUsageCreateInput>;
  connect?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
}

export interface WordUsageCreateInput {
  id?: Maybe<ID_Input>;
  question: String;
  answer: String;
}

export interface HistoryCreateManyInput {
  create?: Maybe<HistoryCreateInput[] | HistoryCreateInput>;
  connect?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
}

export interface KanjiCreateManyWithoutRadicalsInput {
  create?: Maybe<
    KanjiCreateWithoutRadicalsInput[] | KanjiCreateWithoutRadicalsInput
  >;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutRadicalsInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<MeaningCreateManyInput>;
  on?: Maybe<OnCreateManyInput>;
  onRomaji?: Maybe<OnRomajiCreateManyInput>;
  kun?: Maybe<KunCreateManyInput>;
  kunRomaji?: Maybe<KunRomajiCreateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface KanjiCreateManyWithoutPhoneticsInput {
  create?: Maybe<
    KanjiCreateWithoutPhoneticsInput[] | KanjiCreateWithoutPhoneticsInput
  >;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutPhoneticsInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<MeaningCreateManyInput>;
  on?: Maybe<OnCreateManyInput>;
  onRomaji?: Maybe<OnRomajiCreateManyInput>;
  kun?: Maybe<KunCreateManyInput>;
  kunRomaji?: Maybe<KunRomajiCreateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
}

export interface KanjiUpdateInput {
  writing?: Maybe<String>;
  meaning?: Maybe<MeaningUpdateManyInput>;
  on?: Maybe<OnUpdateManyInput>;
  onRomaji?: Maybe<OnRomajiUpdateManyInput>;
  kun?: Maybe<KunUpdateManyInput>;
  kunRomaji?: Maybe<KunRomajiUpdateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface MeaningUpdateManyInput {
  create?: Maybe<MeaningCreateInput[] | MeaningCreateInput>;
  update?: Maybe<
    | MeaningUpdateWithWhereUniqueNestedInput[]
    | MeaningUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MeaningUpsertWithWhereUniqueNestedInput[]
    | MeaningUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MeaningWhereUniqueInput[] | MeaningWhereUniqueInput>;
  connect?: Maybe<MeaningWhereUniqueInput[] | MeaningWhereUniqueInput>;
  set?: Maybe<MeaningWhereUniqueInput[] | MeaningWhereUniqueInput>;
  disconnect?: Maybe<MeaningWhereUniqueInput[] | MeaningWhereUniqueInput>;
  deleteMany?: Maybe<MeaningScalarWhereInput[] | MeaningScalarWhereInput>;
  updateMany?: Maybe<
    | MeaningUpdateManyWithWhereNestedInput[]
    | MeaningUpdateManyWithWhereNestedInput
  >;
}

export interface MeaningUpdateWithWhereUniqueNestedInput {
  where: MeaningWhereUniqueInput;
  data: MeaningUpdateDataInput;
}

export interface MeaningUpdateDataInput {
  meaning?: Maybe<String>;
}

export interface MeaningUpsertWithWhereUniqueNestedInput {
  where: MeaningWhereUniqueInput;
  update: MeaningUpdateDataInput;
  create: MeaningCreateInput;
}

export interface MeaningScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  meaning?: Maybe<String>;
  meaning_not?: Maybe<String>;
  meaning_in?: Maybe<String[] | String>;
  meaning_not_in?: Maybe<String[] | String>;
  meaning_lt?: Maybe<String>;
  meaning_lte?: Maybe<String>;
  meaning_gt?: Maybe<String>;
  meaning_gte?: Maybe<String>;
  meaning_contains?: Maybe<String>;
  meaning_not_contains?: Maybe<String>;
  meaning_starts_with?: Maybe<String>;
  meaning_not_starts_with?: Maybe<String>;
  meaning_ends_with?: Maybe<String>;
  meaning_not_ends_with?: Maybe<String>;
  AND?: Maybe<MeaningScalarWhereInput[] | MeaningScalarWhereInput>;
  OR?: Maybe<MeaningScalarWhereInput[] | MeaningScalarWhereInput>;
  NOT?: Maybe<MeaningScalarWhereInput[] | MeaningScalarWhereInput>;
}

export interface MeaningUpdateManyWithWhereNestedInput {
  where: MeaningScalarWhereInput;
  data: MeaningUpdateManyDataInput;
}

export interface MeaningUpdateManyDataInput {
  meaning?: Maybe<String>;
}

export interface OnUpdateManyInput {
  create?: Maybe<OnCreateInput[] | OnCreateInput>;
  update?: Maybe<
    OnUpdateWithWhereUniqueNestedInput[] | OnUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    OnUpsertWithWhereUniqueNestedInput[] | OnUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OnWhereUniqueInput[] | OnWhereUniqueInput>;
  connect?: Maybe<OnWhereUniqueInput[] | OnWhereUniqueInput>;
  set?: Maybe<OnWhereUniqueInput[] | OnWhereUniqueInput>;
  disconnect?: Maybe<OnWhereUniqueInput[] | OnWhereUniqueInput>;
  deleteMany?: Maybe<OnScalarWhereInput[] | OnScalarWhereInput>;
  updateMany?: Maybe<
    OnUpdateManyWithWhereNestedInput[] | OnUpdateManyWithWhereNestedInput
  >;
}

export interface OnUpdateWithWhereUniqueNestedInput {
  where: OnWhereUniqueInput;
  data: OnUpdateDataInput;
}

export interface OnUpdateDataInput {
  on?: Maybe<String>;
}

export interface OnUpsertWithWhereUniqueNestedInput {
  where: OnWhereUniqueInput;
  update: OnUpdateDataInput;
  create: OnCreateInput;
}

export interface OnScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  on?: Maybe<String>;
  on_not?: Maybe<String>;
  on_in?: Maybe<String[] | String>;
  on_not_in?: Maybe<String[] | String>;
  on_lt?: Maybe<String>;
  on_lte?: Maybe<String>;
  on_gt?: Maybe<String>;
  on_gte?: Maybe<String>;
  on_contains?: Maybe<String>;
  on_not_contains?: Maybe<String>;
  on_starts_with?: Maybe<String>;
  on_not_starts_with?: Maybe<String>;
  on_ends_with?: Maybe<String>;
  on_not_ends_with?: Maybe<String>;
  AND?: Maybe<OnScalarWhereInput[] | OnScalarWhereInput>;
  OR?: Maybe<OnScalarWhereInput[] | OnScalarWhereInput>;
  NOT?: Maybe<OnScalarWhereInput[] | OnScalarWhereInput>;
}

export interface OnUpdateManyWithWhereNestedInput {
  where: OnScalarWhereInput;
  data: OnUpdateManyDataInput;
}

export interface OnUpdateManyDataInput {
  on?: Maybe<String>;
}

export interface OnRomajiUpdateManyInput {
  create?: Maybe<OnRomajiCreateInput[] | OnRomajiCreateInput>;
  update?: Maybe<
    | OnRomajiUpdateWithWhereUniqueNestedInput[]
    | OnRomajiUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OnRomajiUpsertWithWhereUniqueNestedInput[]
    | OnRomajiUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OnRomajiWhereUniqueInput[] | OnRomajiWhereUniqueInput>;
  connect?: Maybe<OnRomajiWhereUniqueInput[] | OnRomajiWhereUniqueInput>;
  set?: Maybe<OnRomajiWhereUniqueInput[] | OnRomajiWhereUniqueInput>;
  disconnect?: Maybe<OnRomajiWhereUniqueInput[] | OnRomajiWhereUniqueInput>;
  deleteMany?: Maybe<OnRomajiScalarWhereInput[] | OnRomajiScalarWhereInput>;
  updateMany?: Maybe<
    | OnRomajiUpdateManyWithWhereNestedInput[]
    | OnRomajiUpdateManyWithWhereNestedInput
  >;
}

export interface OnRomajiUpdateWithWhereUniqueNestedInput {
  where: OnRomajiWhereUniqueInput;
  data: OnRomajiUpdateDataInput;
}

export interface OnRomajiUpdateDataInput {
  onRomaji?: Maybe<String>;
}

export interface OnRomajiUpsertWithWhereUniqueNestedInput {
  where: OnRomajiWhereUniqueInput;
  update: OnRomajiUpdateDataInput;
  create: OnRomajiCreateInput;
}

export interface OnRomajiScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  onRomaji?: Maybe<String>;
  onRomaji_not?: Maybe<String>;
  onRomaji_in?: Maybe<String[] | String>;
  onRomaji_not_in?: Maybe<String[] | String>;
  onRomaji_lt?: Maybe<String>;
  onRomaji_lte?: Maybe<String>;
  onRomaji_gt?: Maybe<String>;
  onRomaji_gte?: Maybe<String>;
  onRomaji_contains?: Maybe<String>;
  onRomaji_not_contains?: Maybe<String>;
  onRomaji_starts_with?: Maybe<String>;
  onRomaji_not_starts_with?: Maybe<String>;
  onRomaji_ends_with?: Maybe<String>;
  onRomaji_not_ends_with?: Maybe<String>;
  AND?: Maybe<OnRomajiScalarWhereInput[] | OnRomajiScalarWhereInput>;
  OR?: Maybe<OnRomajiScalarWhereInput[] | OnRomajiScalarWhereInput>;
  NOT?: Maybe<OnRomajiScalarWhereInput[] | OnRomajiScalarWhereInput>;
}

export interface OnRomajiUpdateManyWithWhereNestedInput {
  where: OnRomajiScalarWhereInput;
  data: OnRomajiUpdateManyDataInput;
}

export interface OnRomajiUpdateManyDataInput {
  onRomaji?: Maybe<String>;
}

export interface KunUpdateManyInput {
  create?: Maybe<KunCreateInput[] | KunCreateInput>;
  update?: Maybe<
    KunUpdateWithWhereUniqueNestedInput[] | KunUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    KunUpsertWithWhereUniqueNestedInput[] | KunUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<KunWhereUniqueInput[] | KunWhereUniqueInput>;
  connect?: Maybe<KunWhereUniqueInput[] | KunWhereUniqueInput>;
  set?: Maybe<KunWhereUniqueInput[] | KunWhereUniqueInput>;
  disconnect?: Maybe<KunWhereUniqueInput[] | KunWhereUniqueInput>;
  deleteMany?: Maybe<KunScalarWhereInput[] | KunScalarWhereInput>;
  updateMany?: Maybe<
    KunUpdateManyWithWhereNestedInput[] | KunUpdateManyWithWhereNestedInput
  >;
}

export interface KunUpdateWithWhereUniqueNestedInput {
  where: KunWhereUniqueInput;
  data: KunUpdateDataInput;
}

export interface KunUpdateDataInput {
  kun?: Maybe<String>;
}

export interface KunUpsertWithWhereUniqueNestedInput {
  where: KunWhereUniqueInput;
  update: KunUpdateDataInput;
  create: KunCreateInput;
}

export interface KunScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  kun?: Maybe<String>;
  kun_not?: Maybe<String>;
  kun_in?: Maybe<String[] | String>;
  kun_not_in?: Maybe<String[] | String>;
  kun_lt?: Maybe<String>;
  kun_lte?: Maybe<String>;
  kun_gt?: Maybe<String>;
  kun_gte?: Maybe<String>;
  kun_contains?: Maybe<String>;
  kun_not_contains?: Maybe<String>;
  kun_starts_with?: Maybe<String>;
  kun_not_starts_with?: Maybe<String>;
  kun_ends_with?: Maybe<String>;
  kun_not_ends_with?: Maybe<String>;
  AND?: Maybe<KunScalarWhereInput[] | KunScalarWhereInput>;
  OR?: Maybe<KunScalarWhereInput[] | KunScalarWhereInput>;
  NOT?: Maybe<KunScalarWhereInput[] | KunScalarWhereInput>;
}

export interface KunUpdateManyWithWhereNestedInput {
  where: KunScalarWhereInput;
  data: KunUpdateManyDataInput;
}

export interface KunUpdateManyDataInput {
  kun?: Maybe<String>;
}

export interface KunRomajiUpdateManyInput {
  create?: Maybe<KunRomajiCreateInput[] | KunRomajiCreateInput>;
  update?: Maybe<
    | KunRomajiUpdateWithWhereUniqueNestedInput[]
    | KunRomajiUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | KunRomajiUpsertWithWhereUniqueNestedInput[]
    | KunRomajiUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<KunRomajiWhereUniqueInput[] | KunRomajiWhereUniqueInput>;
  connect?: Maybe<KunRomajiWhereUniqueInput[] | KunRomajiWhereUniqueInput>;
  set?: Maybe<KunRomajiWhereUniqueInput[] | KunRomajiWhereUniqueInput>;
  disconnect?: Maybe<KunRomajiWhereUniqueInput[] | KunRomajiWhereUniqueInput>;
  deleteMany?: Maybe<KunRomajiScalarWhereInput[] | KunRomajiScalarWhereInput>;
  updateMany?: Maybe<
    | KunRomajiUpdateManyWithWhereNestedInput[]
    | KunRomajiUpdateManyWithWhereNestedInput
  >;
}

export interface KunRomajiUpdateWithWhereUniqueNestedInput {
  where: KunRomajiWhereUniqueInput;
  data: KunRomajiUpdateDataInput;
}

export interface KunRomajiUpdateDataInput {
  kunRomaji?: Maybe<String>;
}

export interface KunRomajiUpsertWithWhereUniqueNestedInput {
  where: KunRomajiWhereUniqueInput;
  update: KunRomajiUpdateDataInput;
  create: KunRomajiCreateInput;
}

export interface KunRomajiScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  kunRomaji?: Maybe<String>;
  kunRomaji_not?: Maybe<String>;
  kunRomaji_in?: Maybe<String[] | String>;
  kunRomaji_not_in?: Maybe<String[] | String>;
  kunRomaji_lt?: Maybe<String>;
  kunRomaji_lte?: Maybe<String>;
  kunRomaji_gt?: Maybe<String>;
  kunRomaji_gte?: Maybe<String>;
  kunRomaji_contains?: Maybe<String>;
  kunRomaji_not_contains?: Maybe<String>;
  kunRomaji_starts_with?: Maybe<String>;
  kunRomaji_not_starts_with?: Maybe<String>;
  kunRomaji_ends_with?: Maybe<String>;
  kunRomaji_not_ends_with?: Maybe<String>;
  AND?: Maybe<KunRomajiScalarWhereInput[] | KunRomajiScalarWhereInput>;
  OR?: Maybe<KunRomajiScalarWhereInput[] | KunRomajiScalarWhereInput>;
  NOT?: Maybe<KunRomajiScalarWhereInput[] | KunRomajiScalarWhereInput>;
}

export interface KunRomajiUpdateManyWithWhereNestedInput {
  where: KunRomajiScalarWhereInput;
  data: KunRomajiUpdateManyDataInput;
}

export interface KunRomajiUpdateManyDataInput {
  kunRomaji?: Maybe<String>;
}

export interface KanjiUpdateManyWithoutOldInput {
  create?: Maybe<KanjiCreateWithoutOldInput[] | KanjiCreateWithoutOldInput>;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutOldInput[]
    | KanjiUpdateWithWhereUniqueWithoutOldInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutOldInput[]
    | KanjiUpsertWithWhereUniqueWithoutOldInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutOldInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutOldDataInput;
}

export interface KanjiUpdateWithoutOldDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<MeaningUpdateManyInput>;
  on?: Maybe<OnUpdateManyInput>;
  onRomaji?: Maybe<OnRomajiUpdateManyInput>;
  kun?: Maybe<KunUpdateManyInput>;
  kunRomaji?: Maybe<KunRomajiUpdateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdateManyWithoutModernInput {
  create?: Maybe<
    KanjiCreateWithoutModernInput[] | KanjiCreateWithoutModernInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutModernInput[]
    | KanjiUpdateWithWhereUniqueWithoutModernInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutModernInput[]
    | KanjiUpsertWithWhereUniqueWithoutModernInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutModernInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutModernDataInput;
}

export interface KanjiUpdateWithoutModernDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<MeaningUpdateManyInput>;
  on?: Maybe<OnUpdateManyInput>;
  onRomaji?: Maybe<OnRomajiUpdateManyInput>;
  kun?: Maybe<KunUpdateManyInput>;
  kunRomaji?: Maybe<KunRomajiUpdateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface WordUpdateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  update?: Maybe<
    | WordUpdateWithWhereUniqueNestedInput[]
    | WordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordUpsertWithWhereUniqueNestedInput[]
    | WordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  set?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  disconnect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  deleteMany?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  updateMany?: Maybe<
    WordUpdateManyWithWhereNestedInput[] | WordUpdateManyWithWhereNestedInput
  >;
}

export interface WordUpdateWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  data: WordUpdateDataInput;
}

export interface WordUpdateDataInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  synonims?: Maybe<WordUpdateManyInput>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  kanji?: Maybe<KanjiUpdateManyInput>;
  patterns?: Maybe<WordExampleUpdateManyInput>;
  antipatterns?: Maybe<WordExampleUpdateManyInput>;
  hiragana?: Maybe<String>;
  usage?: Maybe<WordUsageUpdateManyInput>;
  usageMeaning?: Maybe<WordUsageUpdateManyInput>;
  usageDifference?: Maybe<WordUsageUpdateManyInput>;
  usageWatsay?: Maybe<WordUsageUpdateManyInput>;
  usageOther?: Maybe<WordUsageUpdateManyInput>;
  updateHistory?: Maybe<HistoryUpdateManyInput>;
}

export interface WordUpdatetranslationInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdateManyInput {
  create?: Maybe<KanjiCreateInput[] | KanjiCreateInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueNestedInput[]
    | KanjiUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueNestedInput[]
    | KanjiUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueNestedInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateDataInput;
}

export interface KanjiUpdateDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<MeaningUpdateManyInput>;
  on?: Maybe<OnUpdateManyInput>;
  onRomaji?: Maybe<OnRomajiUpdateManyInput>;
  kun?: Maybe<KunUpdateManyInput>;
  kunRomaji?: Maybe<KunRomajiUpdateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdateManyWithoutRadicalsInput {
  create?: Maybe<
    KanjiCreateWithoutRadicalsInput[] | KanjiCreateWithoutRadicalsInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutRadicalsInput[]
    | KanjiUpdateWithWhereUniqueWithoutRadicalsInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutRadicalsInput[]
    | KanjiUpsertWithWhereUniqueWithoutRadicalsInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutRadicalsInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutRadicalsDataInput;
}

export interface KanjiUpdateWithoutRadicalsDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<MeaningUpdateManyInput>;
  on?: Maybe<OnUpdateManyInput>;
  onRomaji?: Maybe<OnRomajiUpdateManyInput>;
  kun?: Maybe<KunUpdateManyInput>;
  kunRomaji?: Maybe<KunRomajiUpdateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdateManyWithoutPhoneticsInput {
  create?: Maybe<
    KanjiCreateWithoutPhoneticsInput[] | KanjiCreateWithoutPhoneticsInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutPhoneticsInput[]
    | KanjiUpdateWithWhereUniqueWithoutPhoneticsInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutPhoneticsInput[]
    | KanjiUpsertWithWhereUniqueWithoutPhoneticsInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutPhoneticsInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutPhoneticsDataInput;
}

export interface KanjiUpdateWithoutPhoneticsDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<MeaningUpdateManyInput>;
  on?: Maybe<OnUpdateManyInput>;
  onRomaji?: Maybe<OnRomajiUpdateManyInput>;
  kun?: Maybe<KunUpdateManyInput>;
  kunRomaji?: Maybe<KunRomajiUpdateManyInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
}

export interface KanjiUpsertWithWhereUniqueWithoutPhoneticsInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutPhoneticsDataInput;
  create: KanjiCreateWithoutPhoneticsInput;
}

export interface KanjiScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  jlpt?: Maybe<Int>;
  jlpt_not?: Maybe<Int>;
  jlpt_in?: Maybe<Int[] | Int>;
  jlpt_not_in?: Maybe<Int[] | Int>;
  jlpt_lt?: Maybe<Int>;
  jlpt_lte?: Maybe<Int>;
  jlpt_gt?: Maybe<Int>;
  jlpt_gte?: Maybe<Int>;
  strokes?: Maybe<Int>;
  strokes_not?: Maybe<Int>;
  strokes_in?: Maybe<Int[] | Int>;
  strokes_not_in?: Maybe<Int[] | Int>;
  strokes_lt?: Maybe<Int>;
  strokes_lte?: Maybe<Int>;
  strokes_gt?: Maybe<Int>;
  strokes_gte?: Maybe<Int>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  memo?: Maybe<String>;
  memo_not?: Maybe<String>;
  memo_in?: Maybe<String[] | String>;
  memo_not_in?: Maybe<String[] | String>;
  memo_lt?: Maybe<String>;
  memo_lte?: Maybe<String>;
  memo_gt?: Maybe<String>;
  memo_gte?: Maybe<String>;
  memo_contains?: Maybe<String>;
  memo_not_contains?: Maybe<String>;
  memo_starts_with?: Maybe<String>;
  memo_not_starts_with?: Maybe<String>;
  memo_ends_with?: Maybe<String>;
  memo_not_ends_with?: Maybe<String>;
  AND?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  OR?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  NOT?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
}

export interface KanjiUpdateManyWithWhereNestedInput {
  where: KanjiScalarWhereInput;
  data: KanjiUpdateManyDataInput;
}

export interface KanjiUpdateManyDataInput {
  writing?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  memo?: Maybe<String>;
}

export interface KanjiUpsertWithWhereUniqueWithoutRadicalsInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutRadicalsDataInput;
  create: KanjiCreateWithoutRadicalsInput;
}

export interface KanjiUpsertWithWhereUniqueNestedInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateDataInput;
  create: KanjiCreateInput;
}

export interface WordExampleUpdateManyInput {
  create?: Maybe<WordExampleCreateInput[] | WordExampleCreateInput>;
  update?: Maybe<
    | WordExampleUpdateWithWhereUniqueNestedInput[]
    | WordExampleUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordExampleUpsertWithWhereUniqueNestedInput[]
    | WordExampleUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
  connect?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
  set?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
  disconnect?: Maybe<
    WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput
  >;
  deleteMany?: Maybe<
    WordExampleScalarWhereInput[] | WordExampleScalarWhereInput
  >;
  updateMany?: Maybe<
    | WordExampleUpdateManyWithWhereNestedInput[]
    | WordExampleUpdateManyWithWhereNestedInput
  >;
}

export interface WordExampleUpdateWithWhereUniqueNestedInput {
  where: WordExampleWhereUniqueInput;
  data: WordExampleUpdateDataInput;
}

export interface WordExampleUpdateDataInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordExampleUpsertWithWhereUniqueNestedInput {
  where: WordExampleWhereUniqueInput;
  update: WordExampleUpdateDataInput;
  create: WordExampleCreateInput;
}

export interface WordExampleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  original?: Maybe<String>;
  original_not?: Maybe<String>;
  original_in?: Maybe<String[] | String>;
  original_not_in?: Maybe<String[] | String>;
  original_lt?: Maybe<String>;
  original_lte?: Maybe<String>;
  original_gt?: Maybe<String>;
  original_gte?: Maybe<String>;
  original_contains?: Maybe<String>;
  original_not_contains?: Maybe<String>;
  original_starts_with?: Maybe<String>;
  original_not_starts_with?: Maybe<String>;
  original_ends_with?: Maybe<String>;
  original_not_ends_with?: Maybe<String>;
  translation?: Maybe<String>;
  translation_not?: Maybe<String>;
  translation_in?: Maybe<String[] | String>;
  translation_not_in?: Maybe<String[] | String>;
  translation_lt?: Maybe<String>;
  translation_lte?: Maybe<String>;
  translation_gt?: Maybe<String>;
  translation_gte?: Maybe<String>;
  translation_contains?: Maybe<String>;
  translation_not_contains?: Maybe<String>;
  translation_starts_with?: Maybe<String>;
  translation_not_starts_with?: Maybe<String>;
  translation_ends_with?: Maybe<String>;
  translation_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordExampleScalarWhereInput[] | WordExampleScalarWhereInput>;
  OR?: Maybe<WordExampleScalarWhereInput[] | WordExampleScalarWhereInput>;
  NOT?: Maybe<WordExampleScalarWhereInput[] | WordExampleScalarWhereInput>;
}

export interface WordExampleUpdateManyWithWhereNestedInput {
  where: WordExampleScalarWhereInput;
  data: WordExampleUpdateManyDataInput;
}

export interface WordExampleUpdateManyDataInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordUsageUpdateManyInput {
  create?: Maybe<WordUsageCreateInput[] | WordUsageCreateInput>;
  update?: Maybe<
    | WordUsageUpdateWithWhereUniqueNestedInput[]
    | WordUsageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordUsageUpsertWithWhereUniqueNestedInput[]
    | WordUsageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  connect?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  set?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  disconnect?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  deleteMany?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
  updateMany?: Maybe<
    | WordUsageUpdateManyWithWhereNestedInput[]
    | WordUsageUpdateManyWithWhereNestedInput
  >;
}

export interface WordUsageUpdateWithWhereUniqueNestedInput {
  where: WordUsageWhereUniqueInput;
  data: WordUsageUpdateDataInput;
}

export interface WordUsageUpdateDataInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface WordUsageUpsertWithWhereUniqueNestedInput {
  where: WordUsageWhereUniqueInput;
  update: WordUsageUpdateDataInput;
  create: WordUsageCreateInput;
}

export interface WordUsageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
  OR?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
  NOT?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
}

export interface WordUsageUpdateManyWithWhereNestedInput {
  where: WordUsageScalarWhereInput;
  data: WordUsageUpdateManyDataInput;
}

export interface WordUsageUpdateManyDataInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface HistoryUpdateManyInput {
  create?: Maybe<HistoryCreateInput[] | HistoryCreateInput>;
  update?: Maybe<
    | HistoryUpdateWithWhereUniqueNestedInput[]
    | HistoryUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | HistoryUpsertWithWhereUniqueNestedInput[]
    | HistoryUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  connect?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  set?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  disconnect?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  deleteMany?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
  updateMany?: Maybe<
    | HistoryUpdateManyWithWhereNestedInput[]
    | HistoryUpdateManyWithWhereNestedInput
  >;
}

export interface HistoryUpdateWithWhereUniqueNestedInput {
  where: HistoryWhereUniqueInput;
  data: HistoryUpdateDataInput;
}

export interface HistoryUpdateDataInput {
  author?: Maybe<String>;
  origin?: Maybe<String>;
  usage?: Maybe<String>;
  newTranslation?: Maybe<String>;
  time?: Maybe<String>;
}

export interface HistoryUpsertWithWhereUniqueNestedInput {
  where: HistoryWhereUniqueInput;
  update: HistoryUpdateDataInput;
  create: HistoryCreateInput;
}

export interface HistoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  usage?: Maybe<String>;
  usage_not?: Maybe<String>;
  usage_in?: Maybe<String[] | String>;
  usage_not_in?: Maybe<String[] | String>;
  usage_lt?: Maybe<String>;
  usage_lte?: Maybe<String>;
  usage_gt?: Maybe<String>;
  usage_gte?: Maybe<String>;
  usage_contains?: Maybe<String>;
  usage_not_contains?: Maybe<String>;
  usage_starts_with?: Maybe<String>;
  usage_not_starts_with?: Maybe<String>;
  usage_ends_with?: Maybe<String>;
  usage_not_ends_with?: Maybe<String>;
  newTranslation?: Maybe<String>;
  newTranslation_not?: Maybe<String>;
  newTranslation_in?: Maybe<String[] | String>;
  newTranslation_not_in?: Maybe<String[] | String>;
  newTranslation_lt?: Maybe<String>;
  newTranslation_lte?: Maybe<String>;
  newTranslation_gt?: Maybe<String>;
  newTranslation_gte?: Maybe<String>;
  newTranslation_contains?: Maybe<String>;
  newTranslation_not_contains?: Maybe<String>;
  newTranslation_starts_with?: Maybe<String>;
  newTranslation_not_starts_with?: Maybe<String>;
  newTranslation_ends_with?: Maybe<String>;
  newTranslation_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  AND?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
  OR?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
  NOT?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
}

export interface HistoryUpdateManyWithWhereNestedInput {
  where: HistoryScalarWhereInput;
  data: HistoryUpdateManyDataInput;
}

export interface HistoryUpdateManyDataInput {
  author?: Maybe<String>;
  origin?: Maybe<String>;
  usage?: Maybe<String>;
  newTranslation?: Maybe<String>;
  time?: Maybe<String>;
}

export interface WordUpsertWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  update: WordUpdateDataInput;
  create: WordCreateInput;
}

export interface WordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  romaji?: Maybe<String>;
  romaji_not?: Maybe<String>;
  romaji_in?: Maybe<String[] | String>;
  romaji_not_in?: Maybe<String[] | String>;
  romaji_lt?: Maybe<String>;
  romaji_lte?: Maybe<String>;
  romaji_gt?: Maybe<String>;
  romaji_gte?: Maybe<String>;
  romaji_contains?: Maybe<String>;
  romaji_not_contains?: Maybe<String>;
  romaji_starts_with?: Maybe<String>;
  romaji_not_starts_with?: Maybe<String>;
  romaji_ends_with?: Maybe<String>;
  romaji_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  hiragana?: Maybe<String>;
  hiragana_not?: Maybe<String>;
  hiragana_in?: Maybe<String[] | String>;
  hiragana_not_in?: Maybe<String[] | String>;
  hiragana_lt?: Maybe<String>;
  hiragana_lte?: Maybe<String>;
  hiragana_gt?: Maybe<String>;
  hiragana_gte?: Maybe<String>;
  hiragana_contains?: Maybe<String>;
  hiragana_not_contains?: Maybe<String>;
  hiragana_starts_with?: Maybe<String>;
  hiragana_not_starts_with?: Maybe<String>;
  hiragana_ends_with?: Maybe<String>;
  hiragana_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  OR?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  NOT?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
}

export interface WordUpdateManyWithWhereNestedInput {
  where: WordScalarWhereInput;
  data: WordUpdateManyDataInput;
}

export interface WordUpdateManyDataInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  hiragana?: Maybe<String>;
}

export interface KanjiUpsertWithWhereUniqueWithoutModernInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutModernDataInput;
  create: KanjiCreateWithoutModernInput;
}

export interface KanjiUpsertWithWhereUniqueWithoutOldInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutOldDataInput;
  create: KanjiCreateWithoutOldInput;
}

export interface KanjiUpdateManyMutationInput {
  writing?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  memo?: Maybe<String>;
}

export interface KunUpdateInput {
  kun?: Maybe<String>;
}

export interface KunUpdateManyMutationInput {
  kun?: Maybe<String>;
}

export interface KunRomajiUpdateInput {
  kunRomaji?: Maybe<String>;
}

export interface KunRomajiUpdateManyMutationInput {
  kunRomaji?: Maybe<String>;
}

export interface MeaningUpdateInput {
  meaning?: Maybe<String>;
}

export interface MeaningUpdateManyMutationInput {
  meaning?: Maybe<String>;
}

export interface OnUpdateInput {
  on?: Maybe<String>;
}

export interface OnUpdateManyMutationInput {
  on?: Maybe<String>;
}

export interface OnRomajiUpdateInput {
  onRomaji?: Maybe<String>;
}

export interface OnRomajiUpdateManyMutationInput {
  onRomaji?: Maybe<String>;
}

export interface WordUpdateInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  synonims?: Maybe<WordUpdateManyInput>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  kanji?: Maybe<KanjiUpdateManyInput>;
  patterns?: Maybe<WordExampleUpdateManyInput>;
  antipatterns?: Maybe<WordExampleUpdateManyInput>;
  hiragana?: Maybe<String>;
  usage?: Maybe<WordUsageUpdateManyInput>;
  usageMeaning?: Maybe<WordUsageUpdateManyInput>;
  usageDifference?: Maybe<WordUsageUpdateManyInput>;
  usageWatsay?: Maybe<WordUsageUpdateManyInput>;
  usageOther?: Maybe<WordUsageUpdateManyInput>;
  updateHistory?: Maybe<HistoryUpdateManyInput>;
}

export interface WordUpdateManyMutationInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  hiragana?: Maybe<String>;
}

export interface WordExampleUpdateInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordExampleUpdateManyMutationInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordUsageUpdateInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface WordUsageUpdateManyMutationInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface HistorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HistoryWhereInput>;
  AND?: Maybe<HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput>;
  OR?: Maybe<HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput>;
  NOT?: Maybe<HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput>;
}

export interface KanjiSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KanjiWhereInput>;
  AND?: Maybe<KanjiSubscriptionWhereInput[] | KanjiSubscriptionWhereInput>;
  OR?: Maybe<KanjiSubscriptionWhereInput[] | KanjiSubscriptionWhereInput>;
  NOT?: Maybe<KanjiSubscriptionWhereInput[] | KanjiSubscriptionWhereInput>;
}

export interface KunSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KunWhereInput>;
  AND?: Maybe<KunSubscriptionWhereInput[] | KunSubscriptionWhereInput>;
  OR?: Maybe<KunSubscriptionWhereInput[] | KunSubscriptionWhereInput>;
  NOT?: Maybe<KunSubscriptionWhereInput[] | KunSubscriptionWhereInput>;
}

export interface KunRomajiSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KunRomajiWhereInput>;
  AND?: Maybe<
    KunRomajiSubscriptionWhereInput[] | KunRomajiSubscriptionWhereInput
  >;
  OR?: Maybe<
    KunRomajiSubscriptionWhereInput[] | KunRomajiSubscriptionWhereInput
  >;
  NOT?: Maybe<
    KunRomajiSubscriptionWhereInput[] | KunRomajiSubscriptionWhereInput
  >;
}

export interface MeaningSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MeaningWhereInput>;
  AND?: Maybe<MeaningSubscriptionWhereInput[] | MeaningSubscriptionWhereInput>;
  OR?: Maybe<MeaningSubscriptionWhereInput[] | MeaningSubscriptionWhereInput>;
  NOT?: Maybe<MeaningSubscriptionWhereInput[] | MeaningSubscriptionWhereInput>;
}

export interface OnSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OnWhereInput>;
  AND?: Maybe<OnSubscriptionWhereInput[] | OnSubscriptionWhereInput>;
  OR?: Maybe<OnSubscriptionWhereInput[] | OnSubscriptionWhereInput>;
  NOT?: Maybe<OnSubscriptionWhereInput[] | OnSubscriptionWhereInput>;
}

export interface OnRomajiSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OnRomajiWhereInput>;
  AND?: Maybe<
    OnRomajiSubscriptionWhereInput[] | OnRomajiSubscriptionWhereInput
  >;
  OR?: Maybe<OnRomajiSubscriptionWhereInput[] | OnRomajiSubscriptionWhereInput>;
  NOT?: Maybe<
    OnRomajiSubscriptionWhereInput[] | OnRomajiSubscriptionWhereInput
  >;
}

export interface WordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordWhereInput>;
  AND?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  OR?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  NOT?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
}

export interface WordExampleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordExampleWhereInput>;
  AND?: Maybe<
    WordExampleSubscriptionWhereInput[] | WordExampleSubscriptionWhereInput
  >;
  OR?: Maybe<
    WordExampleSubscriptionWhereInput[] | WordExampleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WordExampleSubscriptionWhereInput[] | WordExampleSubscriptionWhereInput
  >;
}

export interface WordUsageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordUsageWhereInput>;
  AND?: Maybe<
    WordUsageSubscriptionWhereInput[] | WordUsageSubscriptionWhereInput
  >;
  OR?: Maybe<
    WordUsageSubscriptionWhereInput[] | WordUsageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WordUsageSubscriptionWhereInput[] | WordUsageSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface History {
  id: ID_Output;
  author: String;
  origin: String;
  usage: String;
  newTranslation: String;
  time: String;
}

export interface HistoryPromise extends Promise<History>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  origin: () => Promise<String>;
  usage: () => Promise<String>;
  newTranslation: () => Promise<String>;
  time: () => Promise<String>;
}

export interface HistorySubscription
  extends Promise<AsyncIterator<History>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: () => Promise<AsyncIterator<String>>;
  origin: () => Promise<AsyncIterator<String>>;
  usage: () => Promise<AsyncIterator<String>>;
  newTranslation: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
}

export interface HistoryNullablePromise
  extends Promise<History | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  origin: () => Promise<String>;
  usage: () => Promise<String>;
  newTranslation: () => Promise<String>;
  time: () => Promise<String>;
}

export interface HistoryConnection {
  pageInfo: PageInfo;
  edges: HistoryEdge[];
}

export interface HistoryConnectionPromise
  extends Promise<HistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HistoryEdge>>() => T;
  aggregate: <T = AggregateHistoryPromise>() => T;
}

export interface HistoryConnectionSubscription
  extends Promise<AsyncIterator<HistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HistoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHistorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface HistoryEdge {
  node: History;
  cursor: String;
}

export interface HistoryEdgePromise extends Promise<HistoryEdge>, Fragmentable {
  node: <T = HistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HistoryEdgeSubscription
  extends Promise<AsyncIterator<HistoryEdge>>,
    Fragmentable {
  node: <T = HistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHistory {
  count: Int;
}

export interface AggregateHistoryPromise
  extends Promise<AggregateHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHistorySubscription
  extends Promise<AsyncIterator<AggregateHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Kanji {
  id: ID_Output;
  writing: String;
  imageUrl?: String;
  videoUrl?: String;
  jlpt?: Int;
  strokes?: Int;
  origin?: String;
  memo?: String;
}

export interface KanjiPromise extends Promise<Kanji>, Fragmentable {
  id: () => Promise<ID_Output>;
  writing: () => Promise<String>;
  meaning: <T = FragmentableArray<Meaning>>(args?: {
    where?: MeaningWhereInput;
    orderBy?: MeaningOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  on: <T = FragmentableArray<On>>(args?: {
    where?: OnWhereInput;
    orderBy?: OnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  onRomaji: <T = FragmentableArray<OnRomaji>>(args?: {
    where?: OnRomajiWhereInput;
    orderBy?: OnRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kun: <T = FragmentableArray<Kun>>(args?: {
    where?: KunWhereInput;
    orderBy?: KunOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kunRomaji: <T = FragmentableArray<KunRomaji>>(args?: {
    where?: KunRomajiWhereInput;
    orderBy?: KunRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  jlpt: () => Promise<Int>;
  strokes: () => Promise<Int>;
  origin: () => Promise<String>;
  old: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  modern: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memo: () => Promise<String>;
  usageFirst: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageLast: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  radicals: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phonetics: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface KanjiSubscription
  extends Promise<AsyncIterator<Kanji>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  writing: () => Promise<AsyncIterator<String>>;
  meaning: <T = Promise<AsyncIterator<MeaningSubscription>>>(args?: {
    where?: MeaningWhereInput;
    orderBy?: MeaningOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  on: <T = Promise<AsyncIterator<OnSubscription>>>(args?: {
    where?: OnWhereInput;
    orderBy?: OnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  onRomaji: <T = Promise<AsyncIterator<OnRomajiSubscription>>>(args?: {
    where?: OnRomajiWhereInput;
    orderBy?: OnRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kun: <T = Promise<AsyncIterator<KunSubscription>>>(args?: {
    where?: KunWhereInput;
    orderBy?: KunOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kunRomaji: <T = Promise<AsyncIterator<KunRomajiSubscription>>>(args?: {
    where?: KunRomajiWhereInput;
    orderBy?: KunRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  jlpt: () => Promise<AsyncIterator<Int>>;
  strokes: () => Promise<AsyncIterator<Int>>;
  origin: () => Promise<AsyncIterator<String>>;
  old: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  modern: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memo: () => Promise<AsyncIterator<String>>;
  usageFirst: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageLast: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  radicals: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phonetics: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface KanjiNullablePromise
  extends Promise<Kanji | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  writing: () => Promise<String>;
  meaning: <T = FragmentableArray<Meaning>>(args?: {
    where?: MeaningWhereInput;
    orderBy?: MeaningOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  on: <T = FragmentableArray<On>>(args?: {
    where?: OnWhereInput;
    orderBy?: OnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  onRomaji: <T = FragmentableArray<OnRomaji>>(args?: {
    where?: OnRomajiWhereInput;
    orderBy?: OnRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kun: <T = FragmentableArray<Kun>>(args?: {
    where?: KunWhereInput;
    orderBy?: KunOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kunRomaji: <T = FragmentableArray<KunRomaji>>(args?: {
    where?: KunRomajiWhereInput;
    orderBy?: KunRomajiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  jlpt: () => Promise<Int>;
  strokes: () => Promise<Int>;
  origin: () => Promise<String>;
  old: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  modern: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memo: () => Promise<String>;
  usageFirst: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageLast: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  radicals: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phonetics: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Meaning {
  id: ID_Output;
  meaning: String;
}

export interface MeaningPromise extends Promise<Meaning>, Fragmentable {
  id: () => Promise<ID_Output>;
  meaning: () => Promise<String>;
}

export interface MeaningSubscription
  extends Promise<AsyncIterator<Meaning>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  meaning: () => Promise<AsyncIterator<String>>;
}

export interface MeaningNullablePromise
  extends Promise<Meaning | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  meaning: () => Promise<String>;
}

export interface On {
  id: ID_Output;
  on: String;
}

export interface OnPromise extends Promise<On>, Fragmentable {
  id: () => Promise<ID_Output>;
  on: () => Promise<String>;
}

export interface OnSubscription
  extends Promise<AsyncIterator<On>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  on: () => Promise<AsyncIterator<String>>;
}

export interface OnNullablePromise extends Promise<On | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  on: () => Promise<String>;
}

export interface OnRomaji {
  id: ID_Output;
  onRomaji: String;
}

export interface OnRomajiPromise extends Promise<OnRomaji>, Fragmentable {
  id: () => Promise<ID_Output>;
  onRomaji: () => Promise<String>;
}

export interface OnRomajiSubscription
  extends Promise<AsyncIterator<OnRomaji>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  onRomaji: () => Promise<AsyncIterator<String>>;
}

export interface OnRomajiNullablePromise
  extends Promise<OnRomaji | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  onRomaji: () => Promise<String>;
}

export interface Kun {
  id: ID_Output;
  kun: String;
}

export interface KunPromise extends Promise<Kun>, Fragmentable {
  id: () => Promise<ID_Output>;
  kun: () => Promise<String>;
}

export interface KunSubscription
  extends Promise<AsyncIterator<Kun>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kun: () => Promise<AsyncIterator<String>>;
}

export interface KunNullablePromise extends Promise<Kun | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  kun: () => Promise<String>;
}

export interface KunRomaji {
  id: ID_Output;
  kunRomaji: String;
}

export interface KunRomajiPromise extends Promise<KunRomaji>, Fragmentable {
  id: () => Promise<ID_Output>;
  kunRomaji: () => Promise<String>;
}

export interface KunRomajiSubscription
  extends Promise<AsyncIterator<KunRomaji>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kunRomaji: () => Promise<AsyncIterator<String>>;
}

export interface KunRomajiNullablePromise
  extends Promise<KunRomaji | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  kunRomaji: () => Promise<String>;
}

export interface Word {
  id: ID_Output;
  translation: String[];
  writing: String;
  romaji?: String;
  imageUrl?: String;
  videoUrl?: String;
  hiragana?: String;
}

export interface WordPromise extends Promise<Word>, Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String[]>;
  writing: () => Promise<String>;
  synonims: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  romaji: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  kanji: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  antipatterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hiragana: () => Promise<String>;
  usage: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageMeaning: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageDifference: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageWatsay: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageOther: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updateHistory: <T = FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordSubscription
  extends Promise<AsyncIterator<Word>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  translation: () => Promise<AsyncIterator<String[]>>;
  writing: () => Promise<AsyncIterator<String>>;
  synonims: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  romaji: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  kanji: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patterns: <T = Promise<AsyncIterator<WordExampleSubscription>>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  antipatterns: <T = Promise<AsyncIterator<WordExampleSubscription>>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hiragana: () => Promise<AsyncIterator<String>>;
  usage: <T = Promise<AsyncIterator<WordUsageSubscription>>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageMeaning: <T = Promise<AsyncIterator<WordUsageSubscription>>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageDifference: <T = Promise<AsyncIterator<WordUsageSubscription>>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageWatsay: <T = Promise<AsyncIterator<WordUsageSubscription>>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageOther: <T = Promise<AsyncIterator<WordUsageSubscription>>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updateHistory: <T = Promise<AsyncIterator<HistorySubscription>>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordNullablePromise
  extends Promise<Word | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String[]>;
  writing: () => Promise<String>;
  synonims: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  romaji: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  kanji: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  antipatterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hiragana: () => Promise<String>;
  usage: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageMeaning: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageDifference: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageWatsay: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageOther: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updateHistory: <T = FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordExample {
  id: ID_Output;
  original: String;
  translation: String;
}

export interface WordExamplePromise extends Promise<WordExample>, Fragmentable {
  id: () => Promise<ID_Output>;
  original: () => Promise<String>;
  translation: () => Promise<String>;
}

export interface WordExampleSubscription
  extends Promise<AsyncIterator<WordExample>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  original: () => Promise<AsyncIterator<String>>;
  translation: () => Promise<AsyncIterator<String>>;
}

export interface WordExampleNullablePromise
  extends Promise<WordExample | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  original: () => Promise<String>;
  translation: () => Promise<String>;
}

export interface WordUsage {
  id: ID_Output;
  question: String;
  answer: String;
}

export interface WordUsagePromise extends Promise<WordUsage>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface WordUsageSubscription
  extends Promise<AsyncIterator<WordUsage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface WordUsageNullablePromise
  extends Promise<WordUsage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface KanjiConnection {
  pageInfo: PageInfo;
  edges: KanjiEdge[];
}

export interface KanjiConnectionPromise
  extends Promise<KanjiConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KanjiEdge>>() => T;
  aggregate: <T = AggregateKanjiPromise>() => T;
}

export interface KanjiConnectionSubscription
  extends Promise<AsyncIterator<KanjiConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KanjiEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKanjiSubscription>() => T;
}

export interface KanjiEdge {
  node: Kanji;
  cursor: String;
}

export interface KanjiEdgePromise extends Promise<KanjiEdge>, Fragmentable {
  node: <T = KanjiPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KanjiEdgeSubscription
  extends Promise<AsyncIterator<KanjiEdge>>,
    Fragmentable {
  node: <T = KanjiSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKanji {
  count: Int;
}

export interface AggregateKanjiPromise
  extends Promise<AggregateKanji>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKanjiSubscription
  extends Promise<AsyncIterator<AggregateKanji>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KunConnection {
  pageInfo: PageInfo;
  edges: KunEdge[];
}

export interface KunConnectionPromise
  extends Promise<KunConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KunEdge>>() => T;
  aggregate: <T = AggregateKunPromise>() => T;
}

export interface KunConnectionSubscription
  extends Promise<AsyncIterator<KunConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KunEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKunSubscription>() => T;
}

export interface KunEdge {
  node: Kun;
  cursor: String;
}

export interface KunEdgePromise extends Promise<KunEdge>, Fragmentable {
  node: <T = KunPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KunEdgeSubscription
  extends Promise<AsyncIterator<KunEdge>>,
    Fragmentable {
  node: <T = KunSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKun {
  count: Int;
}

export interface AggregateKunPromise
  extends Promise<AggregateKun>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKunSubscription
  extends Promise<AsyncIterator<AggregateKun>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KunRomajiConnection {
  pageInfo: PageInfo;
  edges: KunRomajiEdge[];
}

export interface KunRomajiConnectionPromise
  extends Promise<KunRomajiConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KunRomajiEdge>>() => T;
  aggregate: <T = AggregateKunRomajiPromise>() => T;
}

export interface KunRomajiConnectionSubscription
  extends Promise<AsyncIterator<KunRomajiConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KunRomajiEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKunRomajiSubscription>() => T;
}

export interface KunRomajiEdge {
  node: KunRomaji;
  cursor: String;
}

export interface KunRomajiEdgePromise
  extends Promise<KunRomajiEdge>,
    Fragmentable {
  node: <T = KunRomajiPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KunRomajiEdgeSubscription
  extends Promise<AsyncIterator<KunRomajiEdge>>,
    Fragmentable {
  node: <T = KunRomajiSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKunRomaji {
  count: Int;
}

export interface AggregateKunRomajiPromise
  extends Promise<AggregateKunRomaji>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKunRomajiSubscription
  extends Promise<AsyncIterator<AggregateKunRomaji>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MeaningConnection {
  pageInfo: PageInfo;
  edges: MeaningEdge[];
}

export interface MeaningConnectionPromise
  extends Promise<MeaningConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeaningEdge>>() => T;
  aggregate: <T = AggregateMeaningPromise>() => T;
}

export interface MeaningConnectionSubscription
  extends Promise<AsyncIterator<MeaningConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeaningEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeaningSubscription>() => T;
}

export interface MeaningEdge {
  node: Meaning;
  cursor: String;
}

export interface MeaningEdgePromise extends Promise<MeaningEdge>, Fragmentable {
  node: <T = MeaningPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeaningEdgeSubscription
  extends Promise<AsyncIterator<MeaningEdge>>,
    Fragmentable {
  node: <T = MeaningSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMeaning {
  count: Int;
}

export interface AggregateMeaningPromise
  extends Promise<AggregateMeaning>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeaningSubscription
  extends Promise<AsyncIterator<AggregateMeaning>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OnConnection {
  pageInfo: PageInfo;
  edges: OnEdge[];
}

export interface OnConnectionPromise
  extends Promise<OnConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OnEdge>>() => T;
  aggregate: <T = AggregateOnPromise>() => T;
}

export interface OnConnectionSubscription
  extends Promise<AsyncIterator<OnConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OnEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOnSubscription>() => T;
}

export interface OnEdge {
  node: On;
  cursor: String;
}

export interface OnEdgePromise extends Promise<OnEdge>, Fragmentable {
  node: <T = OnPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OnEdgeSubscription
  extends Promise<AsyncIterator<OnEdge>>,
    Fragmentable {
  node: <T = OnSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOn {
  count: Int;
}

export interface AggregateOnPromise extends Promise<AggregateOn>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOnSubscription
  extends Promise<AsyncIterator<AggregateOn>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OnRomajiConnection {
  pageInfo: PageInfo;
  edges: OnRomajiEdge[];
}

export interface OnRomajiConnectionPromise
  extends Promise<OnRomajiConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OnRomajiEdge>>() => T;
  aggregate: <T = AggregateOnRomajiPromise>() => T;
}

export interface OnRomajiConnectionSubscription
  extends Promise<AsyncIterator<OnRomajiConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OnRomajiEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOnRomajiSubscription>() => T;
}

export interface OnRomajiEdge {
  node: OnRomaji;
  cursor: String;
}

export interface OnRomajiEdgePromise
  extends Promise<OnRomajiEdge>,
    Fragmentable {
  node: <T = OnRomajiPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OnRomajiEdgeSubscription
  extends Promise<AsyncIterator<OnRomajiEdge>>,
    Fragmentable {
  node: <T = OnRomajiSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOnRomaji {
  count: Int;
}

export interface AggregateOnRomajiPromise
  extends Promise<AggregateOnRomaji>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOnRomajiSubscription
  extends Promise<AsyncIterator<AggregateOnRomaji>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordConnection {
  pageInfo: PageInfo;
  edges: WordEdge[];
}

export interface WordConnectionPromise
  extends Promise<WordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordEdge>>() => T;
  aggregate: <T = AggregateWordPromise>() => T;
}

export interface WordConnectionSubscription
  extends Promise<AsyncIterator<WordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordSubscription>() => T;
}

export interface WordEdge {
  node: Word;
  cursor: String;
}

export interface WordEdgePromise extends Promise<WordEdge>, Fragmentable {
  node: <T = WordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordEdgeSubscription
  extends Promise<AsyncIterator<WordEdge>>,
    Fragmentable {
  node: <T = WordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWord {
  count: Int;
}

export interface AggregateWordPromise
  extends Promise<AggregateWord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordSubscription
  extends Promise<AsyncIterator<AggregateWord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordExampleConnection {
  pageInfo: PageInfo;
  edges: WordExampleEdge[];
}

export interface WordExampleConnectionPromise
  extends Promise<WordExampleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordExampleEdge>>() => T;
  aggregate: <T = AggregateWordExamplePromise>() => T;
}

export interface WordExampleConnectionSubscription
  extends Promise<AsyncIterator<WordExampleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordExampleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordExampleSubscription>() => T;
}

export interface WordExampleEdge {
  node: WordExample;
  cursor: String;
}

export interface WordExampleEdgePromise
  extends Promise<WordExampleEdge>,
    Fragmentable {
  node: <T = WordExamplePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordExampleEdgeSubscription
  extends Promise<AsyncIterator<WordExampleEdge>>,
    Fragmentable {
  node: <T = WordExampleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWordExample {
  count: Int;
}

export interface AggregateWordExamplePromise
  extends Promise<AggregateWordExample>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordExampleSubscription
  extends Promise<AsyncIterator<AggregateWordExample>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordUsageConnection {
  pageInfo: PageInfo;
  edges: WordUsageEdge[];
}

export interface WordUsageConnectionPromise
  extends Promise<WordUsageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordUsageEdge>>() => T;
  aggregate: <T = AggregateWordUsagePromise>() => T;
}

export interface WordUsageConnectionSubscription
  extends Promise<AsyncIterator<WordUsageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordUsageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordUsageSubscription>() => T;
}

export interface WordUsageEdge {
  node: WordUsage;
  cursor: String;
}

export interface WordUsageEdgePromise
  extends Promise<WordUsageEdge>,
    Fragmentable {
  node: <T = WordUsagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordUsageEdgeSubscription
  extends Promise<AsyncIterator<WordUsageEdge>>,
    Fragmentable {
  node: <T = WordUsageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWordUsage {
  count: Int;
}

export interface AggregateWordUsagePromise
  extends Promise<AggregateWordUsage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordUsageSubscription
  extends Promise<AsyncIterator<AggregateWordUsage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface HistorySubscriptionPayload {
  mutation: MutationType;
  node: History;
  updatedFields: String[];
  previousValues: HistoryPreviousValues;
}

export interface HistorySubscriptionPayloadPromise
  extends Promise<HistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HistoryPreviousValuesPromise>() => T;
}

export interface HistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HistoryPreviousValuesSubscription>() => T;
}

export interface HistoryPreviousValues {
  id: ID_Output;
  author: String;
  origin: String;
  usage: String;
  newTranslation: String;
  time: String;
}

export interface HistoryPreviousValuesPromise
  extends Promise<HistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  origin: () => Promise<String>;
  usage: () => Promise<String>;
  newTranslation: () => Promise<String>;
  time: () => Promise<String>;
}

export interface HistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<HistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: () => Promise<AsyncIterator<String>>;
  origin: () => Promise<AsyncIterator<String>>;
  usage: () => Promise<AsyncIterator<String>>;
  newTranslation: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
}

export interface KanjiSubscriptionPayload {
  mutation: MutationType;
  node: Kanji;
  updatedFields: String[];
  previousValues: KanjiPreviousValues;
}

export interface KanjiSubscriptionPayloadPromise
  extends Promise<KanjiSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KanjiPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KanjiPreviousValuesPromise>() => T;
}

export interface KanjiSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KanjiSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KanjiSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KanjiPreviousValuesSubscription>() => T;
}

export interface KanjiPreviousValues {
  id: ID_Output;
  writing: String;
  imageUrl?: String;
  videoUrl?: String;
  jlpt?: Int;
  strokes?: Int;
  origin?: String;
  memo?: String;
}

export interface KanjiPreviousValuesPromise
  extends Promise<KanjiPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  writing: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  jlpt: () => Promise<Int>;
  strokes: () => Promise<Int>;
  origin: () => Promise<String>;
  memo: () => Promise<String>;
}

export interface KanjiPreviousValuesSubscription
  extends Promise<AsyncIterator<KanjiPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  writing: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  jlpt: () => Promise<AsyncIterator<Int>>;
  strokes: () => Promise<AsyncIterator<Int>>;
  origin: () => Promise<AsyncIterator<String>>;
  memo: () => Promise<AsyncIterator<String>>;
}

export interface KunSubscriptionPayload {
  mutation: MutationType;
  node: Kun;
  updatedFields: String[];
  previousValues: KunPreviousValues;
}

export interface KunSubscriptionPayloadPromise
  extends Promise<KunSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KunPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KunPreviousValuesPromise>() => T;
}

export interface KunSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KunSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KunSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KunPreviousValuesSubscription>() => T;
}

export interface KunPreviousValues {
  id: ID_Output;
  kun: String;
}

export interface KunPreviousValuesPromise
  extends Promise<KunPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  kun: () => Promise<String>;
}

export interface KunPreviousValuesSubscription
  extends Promise<AsyncIterator<KunPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kun: () => Promise<AsyncIterator<String>>;
}

export interface KunRomajiSubscriptionPayload {
  mutation: MutationType;
  node: KunRomaji;
  updatedFields: String[];
  previousValues: KunRomajiPreviousValues;
}

export interface KunRomajiSubscriptionPayloadPromise
  extends Promise<KunRomajiSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KunRomajiPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KunRomajiPreviousValuesPromise>() => T;
}

export interface KunRomajiSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KunRomajiSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KunRomajiSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KunRomajiPreviousValuesSubscription>() => T;
}

export interface KunRomajiPreviousValues {
  id: ID_Output;
  kunRomaji: String;
}

export interface KunRomajiPreviousValuesPromise
  extends Promise<KunRomajiPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  kunRomaji: () => Promise<String>;
}

export interface KunRomajiPreviousValuesSubscription
  extends Promise<AsyncIterator<KunRomajiPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kunRomaji: () => Promise<AsyncIterator<String>>;
}

export interface MeaningSubscriptionPayload {
  mutation: MutationType;
  node: Meaning;
  updatedFields: String[];
  previousValues: MeaningPreviousValues;
}

export interface MeaningSubscriptionPayloadPromise
  extends Promise<MeaningSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeaningPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeaningPreviousValuesPromise>() => T;
}

export interface MeaningSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeaningSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeaningSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeaningPreviousValuesSubscription>() => T;
}

export interface MeaningPreviousValues {
  id: ID_Output;
  meaning: String;
}

export interface MeaningPreviousValuesPromise
  extends Promise<MeaningPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  meaning: () => Promise<String>;
}

export interface MeaningPreviousValuesSubscription
  extends Promise<AsyncIterator<MeaningPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  meaning: () => Promise<AsyncIterator<String>>;
}

export interface OnSubscriptionPayload {
  mutation: MutationType;
  node: On;
  updatedFields: String[];
  previousValues: OnPreviousValues;
}

export interface OnSubscriptionPayloadPromise
  extends Promise<OnSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OnPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OnPreviousValuesPromise>() => T;
}

export interface OnSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OnSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OnSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OnPreviousValuesSubscription>() => T;
}

export interface OnPreviousValues {
  id: ID_Output;
  on: String;
}

export interface OnPreviousValuesPromise
  extends Promise<OnPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  on: () => Promise<String>;
}

export interface OnPreviousValuesSubscription
  extends Promise<AsyncIterator<OnPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  on: () => Promise<AsyncIterator<String>>;
}

export interface OnRomajiSubscriptionPayload {
  mutation: MutationType;
  node: OnRomaji;
  updatedFields: String[];
  previousValues: OnRomajiPreviousValues;
}

export interface OnRomajiSubscriptionPayloadPromise
  extends Promise<OnRomajiSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OnRomajiPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OnRomajiPreviousValuesPromise>() => T;
}

export interface OnRomajiSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OnRomajiSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OnRomajiSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OnRomajiPreviousValuesSubscription>() => T;
}

export interface OnRomajiPreviousValues {
  id: ID_Output;
  onRomaji: String;
}

export interface OnRomajiPreviousValuesPromise
  extends Promise<OnRomajiPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  onRomaji: () => Promise<String>;
}

export interface OnRomajiPreviousValuesSubscription
  extends Promise<AsyncIterator<OnRomajiPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  onRomaji: () => Promise<AsyncIterator<String>>;
}

export interface WordSubscriptionPayload {
  mutation: MutationType;
  node: Word;
  updatedFields: String[];
  previousValues: WordPreviousValues;
}

export interface WordSubscriptionPayloadPromise
  extends Promise<WordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordPreviousValuesPromise>() => T;
}

export interface WordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordPreviousValuesSubscription>() => T;
}

export interface WordPreviousValues {
  id: ID_Output;
  translation: String[];
  writing: String;
  romaji?: String;
  imageUrl?: String;
  videoUrl?: String;
  hiragana?: String;
}

export interface WordPreviousValuesPromise
  extends Promise<WordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String[]>;
  writing: () => Promise<String>;
  romaji: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  hiragana: () => Promise<String>;
}

export interface WordPreviousValuesSubscription
  extends Promise<AsyncIterator<WordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  translation: () => Promise<AsyncIterator<String[]>>;
  writing: () => Promise<AsyncIterator<String>>;
  romaji: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  hiragana: () => Promise<AsyncIterator<String>>;
}

export interface WordExampleSubscriptionPayload {
  mutation: MutationType;
  node: WordExample;
  updatedFields: String[];
  previousValues: WordExamplePreviousValues;
}

export interface WordExampleSubscriptionPayloadPromise
  extends Promise<WordExampleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordExamplePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordExamplePreviousValuesPromise>() => T;
}

export interface WordExampleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordExampleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordExampleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordExamplePreviousValuesSubscription>() => T;
}

export interface WordExamplePreviousValues {
  id: ID_Output;
  original: String;
  translation: String;
}

export interface WordExamplePreviousValuesPromise
  extends Promise<WordExamplePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  original: () => Promise<String>;
  translation: () => Promise<String>;
}

export interface WordExamplePreviousValuesSubscription
  extends Promise<AsyncIterator<WordExamplePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  original: () => Promise<AsyncIterator<String>>;
  translation: () => Promise<AsyncIterator<String>>;
}

export interface WordUsageSubscriptionPayload {
  mutation: MutationType;
  node: WordUsage;
  updatedFields: String[];
  previousValues: WordUsagePreviousValues;
}

export interface WordUsageSubscriptionPayloadPromise
  extends Promise<WordUsageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordUsagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordUsagePreviousValuesPromise>() => T;
}

export interface WordUsageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordUsageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordUsageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordUsagePreviousValuesSubscription>() => T;
}

export interface WordUsagePreviousValues {
  id: ID_Output;
  question: String;
  answer: String;
}

export interface WordUsagePreviousValuesPromise
  extends Promise<WordUsagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface WordUsagePreviousValuesSubscription
  extends Promise<AsyncIterator<WordUsagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Word",
    embedded: false
  },
  {
    name: "History",
    embedded: false
  },
  {
    name: "WordUsage",
    embedded: false
  },
  {
    name: "WordExample",
    embedded: false
  },
  {
    name: "Kanji",
    embedded: false
  },
  {
    name: "Meaning",
    embedded: false
  },
  {
    name: "On",
    embedded: false
  },
  {
    name: "OnRomaji",
    embedded: false
  },
  {
    name: "Kun",
    embedded: false
  },
  {
    name: "KunRomaji",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
