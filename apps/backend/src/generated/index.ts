// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  kanji: (where?: KanjiWhereInput) => Promise<boolean>;
  word: (where?: WordWhereInput) => Promise<boolean>;
  wordExample: (where?: WordExampleWhereInput) => Promise<boolean>;
  wordUsage: (where?: WordUsageWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  kanji: (where: KanjiWhereUniqueInput) => KanjiNullablePromise;
  kanjis: (args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Kanji>;
  kanjisConnection: (args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KanjiConnectionPromise;
  word: (where: WordWhereUniqueInput) => WordNullablePromise;
  words: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Word>;
  wordsConnection: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordConnectionPromise;
  wordExample: (
    where: WordExampleWhereUniqueInput
  ) => WordExampleNullablePromise;
  wordExamples: (args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WordExample>;
  wordExamplesConnection: (args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordExampleConnectionPromise;
  wordUsage: (where: WordUsageWhereUniqueInput) => WordUsageNullablePromise;
  wordUsages: (args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WordUsage>;
  wordUsagesConnection: (args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordUsageConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createKanji: (data: KanjiCreateInput) => KanjiPromise;
  updateKanji: (args: {
    data: KanjiUpdateInput;
    where: KanjiWhereUniqueInput;
  }) => KanjiPromise;
  updateManyKanjis: (args: {
    data: KanjiUpdateManyMutationInput;
    where?: KanjiWhereInput;
  }) => BatchPayloadPromise;
  upsertKanji: (args: {
    where: KanjiWhereUniqueInput;
    create: KanjiCreateInput;
    update: KanjiUpdateInput;
  }) => KanjiPromise;
  deleteKanji: (where: KanjiWhereUniqueInput) => KanjiPromise;
  deleteManyKanjis: (where?: KanjiWhereInput) => BatchPayloadPromise;
  createWord: (data: WordCreateInput) => WordPromise;
  updateWord: (args: {
    data: WordUpdateInput;
    where: WordWhereUniqueInput;
  }) => WordPromise;
  updateManyWords: (args: {
    data: WordUpdateManyMutationInput;
    where?: WordWhereInput;
  }) => BatchPayloadPromise;
  upsertWord: (args: {
    where: WordWhereUniqueInput;
    create: WordCreateInput;
    update: WordUpdateInput;
  }) => WordPromise;
  deleteWord: (where: WordWhereUniqueInput) => WordPromise;
  deleteManyWords: (where?: WordWhereInput) => BatchPayloadPromise;
  createWordExample: (data: WordExampleCreateInput) => WordExamplePromise;
  updateWordExample: (args: {
    data: WordExampleUpdateInput;
    where: WordExampleWhereUniqueInput;
  }) => WordExamplePromise;
  updateManyWordExamples: (args: {
    data: WordExampleUpdateManyMutationInput;
    where?: WordExampleWhereInput;
  }) => BatchPayloadPromise;
  upsertWordExample: (args: {
    where: WordExampleWhereUniqueInput;
    create: WordExampleCreateInput;
    update: WordExampleUpdateInput;
  }) => WordExamplePromise;
  deleteWordExample: (where: WordExampleWhereUniqueInput) => WordExamplePromise;
  deleteManyWordExamples: (
    where?: WordExampleWhereInput
  ) => BatchPayloadPromise;
  createWordUsage: (data: WordUsageCreateInput) => WordUsagePromise;
  updateWordUsage: (args: {
    data: WordUsageUpdateInput;
    where: WordUsageWhereUniqueInput;
  }) => WordUsagePromise;
  updateManyWordUsages: (args: {
    data: WordUsageUpdateManyMutationInput;
    where?: WordUsageWhereInput;
  }) => BatchPayloadPromise;
  upsertWordUsage: (args: {
    where: WordUsageWhereUniqueInput;
    create: WordUsageCreateInput;
    update: WordUsageUpdateInput;
  }) => WordUsagePromise;
  deleteWordUsage: (where: WordUsageWhereUniqueInput) => WordUsagePromise;
  deleteManyWordUsages: (where?: WordUsageWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  kanji: (
    where?: KanjiSubscriptionWhereInput
  ) => KanjiSubscriptionPayloadSubscription;
  word: (
    where?: WordSubscriptionWhereInput
  ) => WordSubscriptionPayloadSubscription;
  wordExample: (
    where?: WordExampleSubscriptionWhereInput
  ) => WordExampleSubscriptionPayloadSubscription;
  wordUsage: (
    where?: WordUsageSubscriptionWhereInput
  ) => WordUsageSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type KanjiOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "writing_ASC"
  | "writing_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "jlpt_ASC"
  | "jlpt_DESC"
  | "strokes_ASC"
  | "strokes_DESC"
  | "origin_ASC"
  | "origin_DESC"
  | "memo_ASC"
  | "memo_DESC";

export type WordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "writing_ASC"
  | "writing_DESC"
  | "romaji_ASC"
  | "romaji_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "hiragana_ASC"
  | "hiragana_DESC";

export type WordExampleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "original_ASC"
  | "original_DESC"
  | "translation_ASC"
  | "translation_DESC";

export type WordUsageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "question_ASC"
  | "question_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type KanjiWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface KanjiWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  jlpt?: Maybe<Int>;
  jlpt_not?: Maybe<Int>;
  jlpt_in?: Maybe<Int[] | Int>;
  jlpt_not_in?: Maybe<Int[] | Int>;
  jlpt_lt?: Maybe<Int>;
  jlpt_lte?: Maybe<Int>;
  jlpt_gt?: Maybe<Int>;
  jlpt_gte?: Maybe<Int>;
  strokes?: Maybe<Int>;
  strokes_not?: Maybe<Int>;
  strokes_in?: Maybe<Int[] | Int>;
  strokes_not_in?: Maybe<Int[] | Int>;
  strokes_lt?: Maybe<Int>;
  strokes_lte?: Maybe<Int>;
  strokes_gt?: Maybe<Int>;
  strokes_gte?: Maybe<Int>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  old_every?: Maybe<KanjiWhereInput>;
  old_some?: Maybe<KanjiWhereInput>;
  old_none?: Maybe<KanjiWhereInput>;
  modern_every?: Maybe<KanjiWhereInput>;
  modern_some?: Maybe<KanjiWhereInput>;
  modern_none?: Maybe<KanjiWhereInput>;
  memo?: Maybe<String>;
  memo_not?: Maybe<String>;
  memo_in?: Maybe<String[] | String>;
  memo_not_in?: Maybe<String[] | String>;
  memo_lt?: Maybe<String>;
  memo_lte?: Maybe<String>;
  memo_gt?: Maybe<String>;
  memo_gte?: Maybe<String>;
  memo_contains?: Maybe<String>;
  memo_not_contains?: Maybe<String>;
  memo_starts_with?: Maybe<String>;
  memo_not_starts_with?: Maybe<String>;
  memo_ends_with?: Maybe<String>;
  memo_not_ends_with?: Maybe<String>;
  usageFirst_every?: Maybe<WordWhereInput>;
  usageFirst_some?: Maybe<WordWhereInput>;
  usageFirst_none?: Maybe<WordWhereInput>;
  usageLast_every?: Maybe<WordWhereInput>;
  usageLast_some?: Maybe<WordWhereInput>;
  usageLast_none?: Maybe<WordWhereInput>;
  radicals_every?: Maybe<KanjiWhereInput>;
  radicals_some?: Maybe<KanjiWhereInput>;
  radicals_none?: Maybe<KanjiWhereInput>;
  phonetics_every?: Maybe<KanjiWhereInput>;
  phonetics_some?: Maybe<KanjiWhereInput>;
  phonetics_none?: Maybe<KanjiWhereInput>;
  AND?: Maybe<KanjiWhereInput[] | KanjiWhereInput>;
  OR?: Maybe<KanjiWhereInput[] | KanjiWhereInput>;
  NOT?: Maybe<KanjiWhereInput[] | KanjiWhereInput>;
}

export interface WordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  synonims_every?: Maybe<WordWhereInput>;
  synonims_some?: Maybe<WordWhereInput>;
  synonims_none?: Maybe<WordWhereInput>;
  romaji?: Maybe<String>;
  romaji_not?: Maybe<String>;
  romaji_in?: Maybe<String[] | String>;
  romaji_not_in?: Maybe<String[] | String>;
  romaji_lt?: Maybe<String>;
  romaji_lte?: Maybe<String>;
  romaji_gt?: Maybe<String>;
  romaji_gte?: Maybe<String>;
  romaji_contains?: Maybe<String>;
  romaji_not_contains?: Maybe<String>;
  romaji_starts_with?: Maybe<String>;
  romaji_not_starts_with?: Maybe<String>;
  romaji_ends_with?: Maybe<String>;
  romaji_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  kanji_every?: Maybe<KanjiWhereInput>;
  kanji_some?: Maybe<KanjiWhereInput>;
  kanji_none?: Maybe<KanjiWhereInput>;
  patterns_every?: Maybe<WordExampleWhereInput>;
  patterns_some?: Maybe<WordExampleWhereInput>;
  patterns_none?: Maybe<WordExampleWhereInput>;
  antipatterns_every?: Maybe<WordExampleWhereInput>;
  antipatterns_some?: Maybe<WordExampleWhereInput>;
  antipatterns_none?: Maybe<WordExampleWhereInput>;
  hiragana?: Maybe<String>;
  hiragana_not?: Maybe<String>;
  hiragana_in?: Maybe<String[] | String>;
  hiragana_not_in?: Maybe<String[] | String>;
  hiragana_lt?: Maybe<String>;
  hiragana_lte?: Maybe<String>;
  hiragana_gt?: Maybe<String>;
  hiragana_gte?: Maybe<String>;
  hiragana_contains?: Maybe<String>;
  hiragana_not_contains?: Maybe<String>;
  hiragana_starts_with?: Maybe<String>;
  hiragana_not_starts_with?: Maybe<String>;
  hiragana_ends_with?: Maybe<String>;
  hiragana_not_ends_with?: Maybe<String>;
  usage_every?: Maybe<WordUsageWhereInput>;
  usage_some?: Maybe<WordUsageWhereInput>;
  usage_none?: Maybe<WordUsageWhereInput>;
  AND?: Maybe<WordWhereInput[] | WordWhereInput>;
  OR?: Maybe<WordWhereInput[] | WordWhereInput>;
  NOT?: Maybe<WordWhereInput[] | WordWhereInput>;
}

export interface WordExampleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  original?: Maybe<String>;
  original_not?: Maybe<String>;
  original_in?: Maybe<String[] | String>;
  original_not_in?: Maybe<String[] | String>;
  original_lt?: Maybe<String>;
  original_lte?: Maybe<String>;
  original_gt?: Maybe<String>;
  original_gte?: Maybe<String>;
  original_contains?: Maybe<String>;
  original_not_contains?: Maybe<String>;
  original_starts_with?: Maybe<String>;
  original_not_starts_with?: Maybe<String>;
  original_ends_with?: Maybe<String>;
  original_not_ends_with?: Maybe<String>;
  translation?: Maybe<String>;
  translation_not?: Maybe<String>;
  translation_in?: Maybe<String[] | String>;
  translation_not_in?: Maybe<String[] | String>;
  translation_lt?: Maybe<String>;
  translation_lte?: Maybe<String>;
  translation_gt?: Maybe<String>;
  translation_gte?: Maybe<String>;
  translation_contains?: Maybe<String>;
  translation_not_contains?: Maybe<String>;
  translation_starts_with?: Maybe<String>;
  translation_not_starts_with?: Maybe<String>;
  translation_ends_with?: Maybe<String>;
  translation_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordExampleWhereInput[] | WordExampleWhereInput>;
  OR?: Maybe<WordExampleWhereInput[] | WordExampleWhereInput>;
  NOT?: Maybe<WordExampleWhereInput[] | WordExampleWhereInput>;
}

export interface WordUsageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordUsageWhereInput[] | WordUsageWhereInput>;
  OR?: Maybe<WordUsageWhereInput[] | WordUsageWhereInput>;
  NOT?: Maybe<WordUsageWhereInput[] | WordUsageWhereInput>;
}

export type WordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WordExampleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WordUsageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface KanjiCreateInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<KanjiCreatemeaningInput>;
  on?: Maybe<KanjiCreateonInput>;
  onRomaji?: Maybe<KanjiCreateonRomajiInput>;
  kun?: Maybe<KanjiCreatekunInput>;
  kunRomaji?: Maybe<KanjiCreatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface KanjiCreatemeaningInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreateonInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreateonRomajiInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreatekunInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreatekunRomajiInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreateManyWithoutOldInput {
  create?: Maybe<KanjiCreateWithoutOldInput[] | KanjiCreateWithoutOldInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutOldInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<KanjiCreatemeaningInput>;
  on?: Maybe<KanjiCreateonInput>;
  onRomaji?: Maybe<KanjiCreateonRomajiInput>;
  kun?: Maybe<KanjiCreatekunInput>;
  kunRomaji?: Maybe<KanjiCreatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface KanjiCreateManyWithoutModernInput {
  create?: Maybe<
    KanjiCreateWithoutModernInput[] | KanjiCreateWithoutModernInput
  >;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutModernInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<KanjiCreatemeaningInput>;
  on?: Maybe<KanjiCreateonInput>;
  onRomaji?: Maybe<KanjiCreateonRomajiInput>;
  kun?: Maybe<KanjiCreatekunInput>;
  kunRomaji?: Maybe<KanjiCreatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface WordCreateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
}

export interface WordCreateInput {
  id?: Maybe<ID_Input>;
  translation?: Maybe<WordCreatetranslationInput>;
  writing: String;
  synonims?: Maybe<WordCreateManyInput>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  kanji?: Maybe<KanjiCreateManyInput>;
  patterns?: Maybe<WordExampleCreateManyInput>;
  antipatterns?: Maybe<WordExampleCreateManyInput>;
  hiragana?: Maybe<String>;
  usage?: Maybe<WordUsageCreateManyInput>;
}

export interface WordCreatetranslationInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiCreateManyInput {
  create?: Maybe<KanjiCreateInput[] | KanjiCreateInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface WordExampleCreateManyInput {
  create?: Maybe<WordExampleCreateInput[] | WordExampleCreateInput>;
  connect?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
}

export interface WordExampleCreateInput {
  id?: Maybe<ID_Input>;
  original: String;
  translation: String;
}

export interface WordUsageCreateManyInput {
  create?: Maybe<WordUsageCreateInput[] | WordUsageCreateInput>;
  connect?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
}

export interface WordUsageCreateInput {
  id?: Maybe<ID_Input>;
  question: String;
  answer: String;
}

export interface KanjiCreateManyWithoutRadicalsInput {
  create?: Maybe<
    KanjiCreateWithoutRadicalsInput[] | KanjiCreateWithoutRadicalsInput
  >;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutRadicalsInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<KanjiCreatemeaningInput>;
  on?: Maybe<KanjiCreateonInput>;
  onRomaji?: Maybe<KanjiCreateonRomajiInput>;
  kun?: Maybe<KanjiCreatekunInput>;
  kunRomaji?: Maybe<KanjiCreatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  phonetics?: Maybe<KanjiCreateManyWithoutPhoneticsInput>;
}

export interface KanjiCreateManyWithoutPhoneticsInput {
  create?: Maybe<
    KanjiCreateWithoutPhoneticsInput[] | KanjiCreateWithoutPhoneticsInput
  >;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
}

export interface KanjiCreateWithoutPhoneticsInput {
  id?: Maybe<ID_Input>;
  writing: String;
  meaning?: Maybe<KanjiCreatemeaningInput>;
  on?: Maybe<KanjiCreateonInput>;
  onRomaji?: Maybe<KanjiCreateonRomajiInput>;
  kun?: Maybe<KanjiCreatekunInput>;
  kunRomaji?: Maybe<KanjiCreatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiCreateManyWithoutOldInput>;
  modern?: Maybe<KanjiCreateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordCreateManyInput>;
  usageLast?: Maybe<WordCreateManyInput>;
  radicals?: Maybe<KanjiCreateManyWithoutRadicalsInput>;
}

export interface KanjiUpdateInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdatemeaningInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdateonInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdateonRomajiInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdatekunInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdatekunRomajiInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdateManyWithoutOldInput {
  create?: Maybe<KanjiCreateWithoutOldInput[] | KanjiCreateWithoutOldInput>;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutOldInput[]
    | KanjiUpdateWithWhereUniqueWithoutOldInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutOldInput[]
    | KanjiUpsertWithWhereUniqueWithoutOldInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutOldInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutOldDataInput;
}

export interface KanjiUpdateWithoutOldDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdateManyWithoutModernInput {
  create?: Maybe<
    KanjiCreateWithoutModernInput[] | KanjiCreateWithoutModernInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutModernInput[]
    | KanjiUpdateWithWhereUniqueWithoutModernInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutModernInput[]
    | KanjiUpsertWithWhereUniqueWithoutModernInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutModernInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutModernDataInput;
}

export interface KanjiUpdateWithoutModernDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface WordUpdateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  update?: Maybe<
    | WordUpdateWithWhereUniqueNestedInput[]
    | WordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordUpsertWithWhereUniqueNestedInput[]
    | WordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  set?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  disconnect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  deleteMany?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  updateMany?: Maybe<
    WordUpdateManyWithWhereNestedInput[] | WordUpdateManyWithWhereNestedInput
  >;
}

export interface WordUpdateWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  data: WordUpdateDataInput;
}

export interface WordUpdateDataInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  synonims?: Maybe<WordUpdateManyInput>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  kanji?: Maybe<KanjiUpdateManyInput>;
  patterns?: Maybe<WordExampleUpdateManyInput>;
  antipatterns?: Maybe<WordExampleUpdateManyInput>;
  hiragana?: Maybe<String>;
  usage?: Maybe<WordUsageUpdateManyInput>;
}

export interface WordUpdatetranslationInput {
  set?: Maybe<String[] | String>;
}

export interface KanjiUpdateManyInput {
  create?: Maybe<KanjiCreateInput[] | KanjiCreateInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueNestedInput[]
    | KanjiUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueNestedInput[]
    | KanjiUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueNestedInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateDataInput;
}

export interface KanjiUpdateDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdateManyWithoutRadicalsInput {
  create?: Maybe<
    KanjiCreateWithoutRadicalsInput[] | KanjiCreateWithoutRadicalsInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutRadicalsInput[]
    | KanjiUpdateWithWhereUniqueWithoutRadicalsInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutRadicalsInput[]
    | KanjiUpsertWithWhereUniqueWithoutRadicalsInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutRadicalsInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutRadicalsDataInput;
}

export interface KanjiUpdateWithoutRadicalsDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  phonetics?: Maybe<KanjiUpdateManyWithoutPhoneticsInput>;
}

export interface KanjiUpdateManyWithoutPhoneticsInput {
  create?: Maybe<
    KanjiCreateWithoutPhoneticsInput[] | KanjiCreateWithoutPhoneticsInput
  >;
  delete?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  connect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  set?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  disconnect?: Maybe<KanjiWhereUniqueInput[] | KanjiWhereUniqueInput>;
  update?: Maybe<
    | KanjiUpdateWithWhereUniqueWithoutPhoneticsInput[]
    | KanjiUpdateWithWhereUniqueWithoutPhoneticsInput
  >;
  upsert?: Maybe<
    | KanjiUpsertWithWhereUniqueWithoutPhoneticsInput[]
    | KanjiUpsertWithWhereUniqueWithoutPhoneticsInput
  >;
  deleteMany?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  updateMany?: Maybe<
    KanjiUpdateManyWithWhereNestedInput[] | KanjiUpdateManyWithWhereNestedInput
  >;
}

export interface KanjiUpdateWithWhereUniqueWithoutPhoneticsInput {
  where: KanjiWhereUniqueInput;
  data: KanjiUpdateWithoutPhoneticsDataInput;
}

export interface KanjiUpdateWithoutPhoneticsDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  old?: Maybe<KanjiUpdateManyWithoutOldInput>;
  modern?: Maybe<KanjiUpdateManyWithoutModernInput>;
  memo?: Maybe<String>;
  usageFirst?: Maybe<WordUpdateManyInput>;
  usageLast?: Maybe<WordUpdateManyInput>;
  radicals?: Maybe<KanjiUpdateManyWithoutRadicalsInput>;
}

export interface KanjiUpsertWithWhereUniqueWithoutPhoneticsInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutPhoneticsDataInput;
  create: KanjiCreateWithoutPhoneticsInput;
}

export interface KanjiScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  jlpt?: Maybe<Int>;
  jlpt_not?: Maybe<Int>;
  jlpt_in?: Maybe<Int[] | Int>;
  jlpt_not_in?: Maybe<Int[] | Int>;
  jlpt_lt?: Maybe<Int>;
  jlpt_lte?: Maybe<Int>;
  jlpt_gt?: Maybe<Int>;
  jlpt_gte?: Maybe<Int>;
  strokes?: Maybe<Int>;
  strokes_not?: Maybe<Int>;
  strokes_in?: Maybe<Int[] | Int>;
  strokes_not_in?: Maybe<Int[] | Int>;
  strokes_lt?: Maybe<Int>;
  strokes_lte?: Maybe<Int>;
  strokes_gt?: Maybe<Int>;
  strokes_gte?: Maybe<Int>;
  origin?: Maybe<String>;
  origin_not?: Maybe<String>;
  origin_in?: Maybe<String[] | String>;
  origin_not_in?: Maybe<String[] | String>;
  origin_lt?: Maybe<String>;
  origin_lte?: Maybe<String>;
  origin_gt?: Maybe<String>;
  origin_gte?: Maybe<String>;
  origin_contains?: Maybe<String>;
  origin_not_contains?: Maybe<String>;
  origin_starts_with?: Maybe<String>;
  origin_not_starts_with?: Maybe<String>;
  origin_ends_with?: Maybe<String>;
  origin_not_ends_with?: Maybe<String>;
  memo?: Maybe<String>;
  memo_not?: Maybe<String>;
  memo_in?: Maybe<String[] | String>;
  memo_not_in?: Maybe<String[] | String>;
  memo_lt?: Maybe<String>;
  memo_lte?: Maybe<String>;
  memo_gt?: Maybe<String>;
  memo_gte?: Maybe<String>;
  memo_contains?: Maybe<String>;
  memo_not_contains?: Maybe<String>;
  memo_starts_with?: Maybe<String>;
  memo_not_starts_with?: Maybe<String>;
  memo_ends_with?: Maybe<String>;
  memo_not_ends_with?: Maybe<String>;
  AND?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  OR?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
  NOT?: Maybe<KanjiScalarWhereInput[] | KanjiScalarWhereInput>;
}

export interface KanjiUpdateManyWithWhereNestedInput {
  where: KanjiScalarWhereInput;
  data: KanjiUpdateManyDataInput;
}

export interface KanjiUpdateManyDataInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  memo?: Maybe<String>;
}

export interface KanjiUpsertWithWhereUniqueWithoutRadicalsInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutRadicalsDataInput;
  create: KanjiCreateWithoutRadicalsInput;
}

export interface KanjiUpsertWithWhereUniqueNestedInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateDataInput;
  create: KanjiCreateInput;
}

export interface WordExampleUpdateManyInput {
  create?: Maybe<WordExampleCreateInput[] | WordExampleCreateInput>;
  update?: Maybe<
    | WordExampleUpdateWithWhereUniqueNestedInput[]
    | WordExampleUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordExampleUpsertWithWhereUniqueNestedInput[]
    | WordExampleUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
  connect?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
  set?: Maybe<WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput>;
  disconnect?: Maybe<
    WordExampleWhereUniqueInput[] | WordExampleWhereUniqueInput
  >;
  deleteMany?: Maybe<
    WordExampleScalarWhereInput[] | WordExampleScalarWhereInput
  >;
  updateMany?: Maybe<
    | WordExampleUpdateManyWithWhereNestedInput[]
    | WordExampleUpdateManyWithWhereNestedInput
  >;
}

export interface WordExampleUpdateWithWhereUniqueNestedInput {
  where: WordExampleWhereUniqueInput;
  data: WordExampleUpdateDataInput;
}

export interface WordExampleUpdateDataInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordExampleUpsertWithWhereUniqueNestedInput {
  where: WordExampleWhereUniqueInput;
  update: WordExampleUpdateDataInput;
  create: WordExampleCreateInput;
}

export interface WordExampleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  original?: Maybe<String>;
  original_not?: Maybe<String>;
  original_in?: Maybe<String[] | String>;
  original_not_in?: Maybe<String[] | String>;
  original_lt?: Maybe<String>;
  original_lte?: Maybe<String>;
  original_gt?: Maybe<String>;
  original_gte?: Maybe<String>;
  original_contains?: Maybe<String>;
  original_not_contains?: Maybe<String>;
  original_starts_with?: Maybe<String>;
  original_not_starts_with?: Maybe<String>;
  original_ends_with?: Maybe<String>;
  original_not_ends_with?: Maybe<String>;
  translation?: Maybe<String>;
  translation_not?: Maybe<String>;
  translation_in?: Maybe<String[] | String>;
  translation_not_in?: Maybe<String[] | String>;
  translation_lt?: Maybe<String>;
  translation_lte?: Maybe<String>;
  translation_gt?: Maybe<String>;
  translation_gte?: Maybe<String>;
  translation_contains?: Maybe<String>;
  translation_not_contains?: Maybe<String>;
  translation_starts_with?: Maybe<String>;
  translation_not_starts_with?: Maybe<String>;
  translation_ends_with?: Maybe<String>;
  translation_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordExampleScalarWhereInput[] | WordExampleScalarWhereInput>;
  OR?: Maybe<WordExampleScalarWhereInput[] | WordExampleScalarWhereInput>;
  NOT?: Maybe<WordExampleScalarWhereInput[] | WordExampleScalarWhereInput>;
}

export interface WordExampleUpdateManyWithWhereNestedInput {
  where: WordExampleScalarWhereInput;
  data: WordExampleUpdateManyDataInput;
}

export interface WordExampleUpdateManyDataInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordUsageUpdateManyInput {
  create?: Maybe<WordUsageCreateInput[] | WordUsageCreateInput>;
  update?: Maybe<
    | WordUsageUpdateWithWhereUniqueNestedInput[]
    | WordUsageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordUsageUpsertWithWhereUniqueNestedInput[]
    | WordUsageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  connect?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  set?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  disconnect?: Maybe<WordUsageWhereUniqueInput[] | WordUsageWhereUniqueInput>;
  deleteMany?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
  updateMany?: Maybe<
    | WordUsageUpdateManyWithWhereNestedInput[]
    | WordUsageUpdateManyWithWhereNestedInput
  >;
}

export interface WordUsageUpdateWithWhereUniqueNestedInput {
  where: WordUsageWhereUniqueInput;
  data: WordUsageUpdateDataInput;
}

export interface WordUsageUpdateDataInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface WordUsageUpsertWithWhereUniqueNestedInput {
  where: WordUsageWhereUniqueInput;
  update: WordUsageUpdateDataInput;
  create: WordUsageCreateInput;
}

export interface WordUsageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
  OR?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
  NOT?: Maybe<WordUsageScalarWhereInput[] | WordUsageScalarWhereInput>;
}

export interface WordUsageUpdateManyWithWhereNestedInput {
  where: WordUsageScalarWhereInput;
  data: WordUsageUpdateManyDataInput;
}

export interface WordUsageUpdateManyDataInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface WordUpsertWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  update: WordUpdateDataInput;
  create: WordCreateInput;
}

export interface WordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  writing?: Maybe<String>;
  writing_not?: Maybe<String>;
  writing_in?: Maybe<String[] | String>;
  writing_not_in?: Maybe<String[] | String>;
  writing_lt?: Maybe<String>;
  writing_lte?: Maybe<String>;
  writing_gt?: Maybe<String>;
  writing_gte?: Maybe<String>;
  writing_contains?: Maybe<String>;
  writing_not_contains?: Maybe<String>;
  writing_starts_with?: Maybe<String>;
  writing_not_starts_with?: Maybe<String>;
  writing_ends_with?: Maybe<String>;
  writing_not_ends_with?: Maybe<String>;
  romaji?: Maybe<String>;
  romaji_not?: Maybe<String>;
  romaji_in?: Maybe<String[] | String>;
  romaji_not_in?: Maybe<String[] | String>;
  romaji_lt?: Maybe<String>;
  romaji_lte?: Maybe<String>;
  romaji_gt?: Maybe<String>;
  romaji_gte?: Maybe<String>;
  romaji_contains?: Maybe<String>;
  romaji_not_contains?: Maybe<String>;
  romaji_starts_with?: Maybe<String>;
  romaji_not_starts_with?: Maybe<String>;
  romaji_ends_with?: Maybe<String>;
  romaji_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  hiragana?: Maybe<String>;
  hiragana_not?: Maybe<String>;
  hiragana_in?: Maybe<String[] | String>;
  hiragana_not_in?: Maybe<String[] | String>;
  hiragana_lt?: Maybe<String>;
  hiragana_lte?: Maybe<String>;
  hiragana_gt?: Maybe<String>;
  hiragana_gte?: Maybe<String>;
  hiragana_contains?: Maybe<String>;
  hiragana_not_contains?: Maybe<String>;
  hiragana_starts_with?: Maybe<String>;
  hiragana_not_starts_with?: Maybe<String>;
  hiragana_ends_with?: Maybe<String>;
  hiragana_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  OR?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  NOT?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
}

export interface WordUpdateManyWithWhereNestedInput {
  where: WordScalarWhereInput;
  data: WordUpdateManyDataInput;
}

export interface WordUpdateManyDataInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  hiragana?: Maybe<String>;
}

export interface KanjiUpsertWithWhereUniqueWithoutModernInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutModernDataInput;
  create: KanjiCreateWithoutModernInput;
}

export interface KanjiUpsertWithWhereUniqueWithoutOldInput {
  where: KanjiWhereUniqueInput;
  update: KanjiUpdateWithoutOldDataInput;
  create: KanjiCreateWithoutOldInput;
}

export interface KanjiUpdateManyMutationInput {
  writing?: Maybe<String>;
  meaning?: Maybe<KanjiUpdatemeaningInput>;
  on?: Maybe<KanjiUpdateonInput>;
  onRomaji?: Maybe<KanjiUpdateonRomajiInput>;
  kun?: Maybe<KanjiUpdatekunInput>;
  kunRomaji?: Maybe<KanjiUpdatekunRomajiInput>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  jlpt?: Maybe<Int>;
  strokes?: Maybe<Int>;
  origin?: Maybe<String>;
  memo?: Maybe<String>;
}

export interface WordUpdateInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  synonims?: Maybe<WordUpdateManyInput>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  kanji?: Maybe<KanjiUpdateManyInput>;
  patterns?: Maybe<WordExampleUpdateManyInput>;
  antipatterns?: Maybe<WordExampleUpdateManyInput>;
  hiragana?: Maybe<String>;
  usage?: Maybe<WordUsageUpdateManyInput>;
}

export interface WordUpdateManyMutationInput {
  translation?: Maybe<WordUpdatetranslationInput>;
  writing?: Maybe<String>;
  romaji?: Maybe<String>;
  imageUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  hiragana?: Maybe<String>;
}

export interface WordExampleUpdateInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordExampleUpdateManyMutationInput {
  original?: Maybe<String>;
  translation?: Maybe<String>;
}

export interface WordUsageUpdateInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface WordUsageUpdateManyMutationInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface KanjiSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KanjiWhereInput>;
  AND?: Maybe<KanjiSubscriptionWhereInput[] | KanjiSubscriptionWhereInput>;
  OR?: Maybe<KanjiSubscriptionWhereInput[] | KanjiSubscriptionWhereInput>;
  NOT?: Maybe<KanjiSubscriptionWhereInput[] | KanjiSubscriptionWhereInput>;
}

export interface WordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordWhereInput>;
  AND?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  OR?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  NOT?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
}

export interface WordExampleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordExampleWhereInput>;
  AND?: Maybe<
    WordExampleSubscriptionWhereInput[] | WordExampleSubscriptionWhereInput
  >;
  OR?: Maybe<
    WordExampleSubscriptionWhereInput[] | WordExampleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WordExampleSubscriptionWhereInput[] | WordExampleSubscriptionWhereInput
  >;
}

export interface WordUsageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordUsageWhereInput>;
  AND?: Maybe<
    WordUsageSubscriptionWhereInput[] | WordUsageSubscriptionWhereInput
  >;
  OR?: Maybe<
    WordUsageSubscriptionWhereInput[] | WordUsageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WordUsageSubscriptionWhereInput[] | WordUsageSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Kanji {
  id: ID_Output;
  writing: String;
  meaning: String[];
  on: String[];
  onRomaji: String[];
  kun: String[];
  kunRomaji: String[];
  imageUrl?: String;
  videoUrl?: String;
  jlpt?: Int;
  strokes?: Int;
  origin?: String;
  memo?: String;
}

export interface KanjiPromise extends Promise<Kanji>, Fragmentable {
  id: () => Promise<ID_Output>;
  writing: () => Promise<String>;
  meaning: () => Promise<String[]>;
  on: () => Promise<String[]>;
  onRomaji: () => Promise<String[]>;
  kun: () => Promise<String[]>;
  kunRomaji: () => Promise<String[]>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  jlpt: () => Promise<Int>;
  strokes: () => Promise<Int>;
  origin: () => Promise<String>;
  old: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  modern: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memo: () => Promise<String>;
  usageFirst: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageLast: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  radicals: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phonetics: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface KanjiSubscription
  extends Promise<AsyncIterator<Kanji>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  writing: () => Promise<AsyncIterator<String>>;
  meaning: () => Promise<AsyncIterator<String[]>>;
  on: () => Promise<AsyncIterator<String[]>>;
  onRomaji: () => Promise<AsyncIterator<String[]>>;
  kun: () => Promise<AsyncIterator<String[]>>;
  kunRomaji: () => Promise<AsyncIterator<String[]>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  jlpt: () => Promise<AsyncIterator<Int>>;
  strokes: () => Promise<AsyncIterator<Int>>;
  origin: () => Promise<AsyncIterator<String>>;
  old: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  modern: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memo: () => Promise<AsyncIterator<String>>;
  usageFirst: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageLast: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  radicals: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phonetics: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface KanjiNullablePromise
  extends Promise<Kanji | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  writing: () => Promise<String>;
  meaning: () => Promise<String[]>;
  on: () => Promise<String[]>;
  onRomaji: () => Promise<String[]>;
  kun: () => Promise<String[]>;
  kunRomaji: () => Promise<String[]>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  jlpt: () => Promise<Int>;
  strokes: () => Promise<Int>;
  origin: () => Promise<String>;
  old: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  modern: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  memo: () => Promise<String>;
  usageFirst: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  usageLast: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  radicals: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phonetics: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Word {
  id: ID_Output;
  translation: String[];
  writing: String;
  romaji?: String;
  imageUrl?: String;
  videoUrl?: String;
  hiragana?: String;
}

export interface WordPromise extends Promise<Word>, Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String[]>;
  writing: () => Promise<String>;
  synonims: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  romaji: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  kanji: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  antipatterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hiragana: () => Promise<String>;
  usage: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordSubscription
  extends Promise<AsyncIterator<Word>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  translation: () => Promise<AsyncIterator<String[]>>;
  writing: () => Promise<AsyncIterator<String>>;
  synonims: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  romaji: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  kanji: <T = Promise<AsyncIterator<KanjiSubscription>>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patterns: <T = Promise<AsyncIterator<WordExampleSubscription>>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  antipatterns: <T = Promise<AsyncIterator<WordExampleSubscription>>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hiragana: () => Promise<AsyncIterator<String>>;
  usage: <T = Promise<AsyncIterator<WordUsageSubscription>>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordNullablePromise
  extends Promise<Word | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String[]>;
  writing: () => Promise<String>;
  synonims: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  romaji: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  kanji: <T = FragmentableArray<Kanji>>(args?: {
    where?: KanjiWhereInput;
    orderBy?: KanjiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  patterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  antipatterns: <T = FragmentableArray<WordExample>>(args?: {
    where?: WordExampleWhereInput;
    orderBy?: WordExampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hiragana: () => Promise<String>;
  usage: <T = FragmentableArray<WordUsage>>(args?: {
    where?: WordUsageWhereInput;
    orderBy?: WordUsageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordExample {
  id: ID_Output;
  original: String;
  translation: String;
}

export interface WordExamplePromise extends Promise<WordExample>, Fragmentable {
  id: () => Promise<ID_Output>;
  original: () => Promise<String>;
  translation: () => Promise<String>;
}

export interface WordExampleSubscription
  extends Promise<AsyncIterator<WordExample>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  original: () => Promise<AsyncIterator<String>>;
  translation: () => Promise<AsyncIterator<String>>;
}

export interface WordExampleNullablePromise
  extends Promise<WordExample | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  original: () => Promise<String>;
  translation: () => Promise<String>;
}

export interface WordUsage {
  id: ID_Output;
  question: String;
  answer: String;
}

export interface WordUsagePromise extends Promise<WordUsage>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface WordUsageSubscription
  extends Promise<AsyncIterator<WordUsage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface WordUsageNullablePromise
  extends Promise<WordUsage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface KanjiConnection {
  pageInfo: PageInfo;
  edges: KanjiEdge[];
}

export interface KanjiConnectionPromise
  extends Promise<KanjiConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KanjiEdge>>() => T;
  aggregate: <T = AggregateKanjiPromise>() => T;
}

export interface KanjiConnectionSubscription
  extends Promise<AsyncIterator<KanjiConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KanjiEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKanjiSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface KanjiEdge {
  node: Kanji;
  cursor: String;
}

export interface KanjiEdgePromise extends Promise<KanjiEdge>, Fragmentable {
  node: <T = KanjiPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KanjiEdgeSubscription
  extends Promise<AsyncIterator<KanjiEdge>>,
    Fragmentable {
  node: <T = KanjiSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKanji {
  count: Int;
}

export interface AggregateKanjiPromise
  extends Promise<AggregateKanji>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKanjiSubscription
  extends Promise<AsyncIterator<AggregateKanji>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordConnection {
  pageInfo: PageInfo;
  edges: WordEdge[];
}

export interface WordConnectionPromise
  extends Promise<WordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordEdge>>() => T;
  aggregate: <T = AggregateWordPromise>() => T;
}

export interface WordConnectionSubscription
  extends Promise<AsyncIterator<WordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordSubscription>() => T;
}

export interface WordEdge {
  node: Word;
  cursor: String;
}

export interface WordEdgePromise extends Promise<WordEdge>, Fragmentable {
  node: <T = WordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordEdgeSubscription
  extends Promise<AsyncIterator<WordEdge>>,
    Fragmentable {
  node: <T = WordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWord {
  count: Int;
}

export interface AggregateWordPromise
  extends Promise<AggregateWord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordSubscription
  extends Promise<AsyncIterator<AggregateWord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordExampleConnection {
  pageInfo: PageInfo;
  edges: WordExampleEdge[];
}

export interface WordExampleConnectionPromise
  extends Promise<WordExampleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordExampleEdge>>() => T;
  aggregate: <T = AggregateWordExamplePromise>() => T;
}

export interface WordExampleConnectionSubscription
  extends Promise<AsyncIterator<WordExampleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordExampleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordExampleSubscription>() => T;
}

export interface WordExampleEdge {
  node: WordExample;
  cursor: String;
}

export interface WordExampleEdgePromise
  extends Promise<WordExampleEdge>,
    Fragmentable {
  node: <T = WordExamplePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordExampleEdgeSubscription
  extends Promise<AsyncIterator<WordExampleEdge>>,
    Fragmentable {
  node: <T = WordExampleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWordExample {
  count: Int;
}

export interface AggregateWordExamplePromise
  extends Promise<AggregateWordExample>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordExampleSubscription
  extends Promise<AsyncIterator<AggregateWordExample>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordUsageConnection {
  pageInfo: PageInfo;
  edges: WordUsageEdge[];
}

export interface WordUsageConnectionPromise
  extends Promise<WordUsageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordUsageEdge>>() => T;
  aggregate: <T = AggregateWordUsagePromise>() => T;
}

export interface WordUsageConnectionSubscription
  extends Promise<AsyncIterator<WordUsageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordUsageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordUsageSubscription>() => T;
}

export interface WordUsageEdge {
  node: WordUsage;
  cursor: String;
}

export interface WordUsageEdgePromise
  extends Promise<WordUsageEdge>,
    Fragmentable {
  node: <T = WordUsagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordUsageEdgeSubscription
  extends Promise<AsyncIterator<WordUsageEdge>>,
    Fragmentable {
  node: <T = WordUsageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWordUsage {
  count: Int;
}

export interface AggregateWordUsagePromise
  extends Promise<AggregateWordUsage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordUsageSubscription
  extends Promise<AsyncIterator<AggregateWordUsage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface KanjiSubscriptionPayload {
  mutation: MutationType;
  node: Kanji;
  updatedFields: String[];
  previousValues: KanjiPreviousValues;
}

export interface KanjiSubscriptionPayloadPromise
  extends Promise<KanjiSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KanjiPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KanjiPreviousValuesPromise>() => T;
}

export interface KanjiSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KanjiSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KanjiSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KanjiPreviousValuesSubscription>() => T;
}

export interface KanjiPreviousValues {
  id: ID_Output;
  writing: String;
  meaning: String[];
  on: String[];
  onRomaji: String[];
  kun: String[];
  kunRomaji: String[];
  imageUrl?: String;
  videoUrl?: String;
  jlpt?: Int;
  strokes?: Int;
  origin?: String;
  memo?: String;
}

export interface KanjiPreviousValuesPromise
  extends Promise<KanjiPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  writing: () => Promise<String>;
  meaning: () => Promise<String[]>;
  on: () => Promise<String[]>;
  onRomaji: () => Promise<String[]>;
  kun: () => Promise<String[]>;
  kunRomaji: () => Promise<String[]>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  jlpt: () => Promise<Int>;
  strokes: () => Promise<Int>;
  origin: () => Promise<String>;
  memo: () => Promise<String>;
}

export interface KanjiPreviousValuesSubscription
  extends Promise<AsyncIterator<KanjiPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  writing: () => Promise<AsyncIterator<String>>;
  meaning: () => Promise<AsyncIterator<String[]>>;
  on: () => Promise<AsyncIterator<String[]>>;
  onRomaji: () => Promise<AsyncIterator<String[]>>;
  kun: () => Promise<AsyncIterator<String[]>>;
  kunRomaji: () => Promise<AsyncIterator<String[]>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  jlpt: () => Promise<AsyncIterator<Int>>;
  strokes: () => Promise<AsyncIterator<Int>>;
  origin: () => Promise<AsyncIterator<String>>;
  memo: () => Promise<AsyncIterator<String>>;
}

export interface WordSubscriptionPayload {
  mutation: MutationType;
  node: Word;
  updatedFields: String[];
  previousValues: WordPreviousValues;
}

export interface WordSubscriptionPayloadPromise
  extends Promise<WordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordPreviousValuesPromise>() => T;
}

export interface WordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordPreviousValuesSubscription>() => T;
}

export interface WordPreviousValues {
  id: ID_Output;
  translation: String[];
  writing: String;
  romaji?: String;
  imageUrl?: String;
  videoUrl?: String;
  hiragana?: String;
}

export interface WordPreviousValuesPromise
  extends Promise<WordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  translation: () => Promise<String[]>;
  writing: () => Promise<String>;
  romaji: () => Promise<String>;
  imageUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  hiragana: () => Promise<String>;
}

export interface WordPreviousValuesSubscription
  extends Promise<AsyncIterator<WordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  translation: () => Promise<AsyncIterator<String[]>>;
  writing: () => Promise<AsyncIterator<String>>;
  romaji: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  hiragana: () => Promise<AsyncIterator<String>>;
}

export interface WordExampleSubscriptionPayload {
  mutation: MutationType;
  node: WordExample;
  updatedFields: String[];
  previousValues: WordExamplePreviousValues;
}

export interface WordExampleSubscriptionPayloadPromise
  extends Promise<WordExampleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordExamplePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordExamplePreviousValuesPromise>() => T;
}

export interface WordExampleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordExampleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordExampleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordExamplePreviousValuesSubscription>() => T;
}

export interface WordExamplePreviousValues {
  id: ID_Output;
  original: String;
  translation: String;
}

export interface WordExamplePreviousValuesPromise
  extends Promise<WordExamplePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  original: () => Promise<String>;
  translation: () => Promise<String>;
}

export interface WordExamplePreviousValuesSubscription
  extends Promise<AsyncIterator<WordExamplePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  original: () => Promise<AsyncIterator<String>>;
  translation: () => Promise<AsyncIterator<String>>;
}

export interface WordUsageSubscriptionPayload {
  mutation: MutationType;
  node: WordUsage;
  updatedFields: String[];
  previousValues: WordUsagePreviousValues;
}

export interface WordUsageSubscriptionPayloadPromise
  extends Promise<WordUsageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordUsagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordUsagePreviousValuesPromise>() => T;
}

export interface WordUsageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordUsageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordUsageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordUsagePreviousValuesSubscription>() => T;
}

export interface WordUsagePreviousValues {
  id: ID_Output;
  question: String;
  answer: String;
}

export interface WordUsagePreviousValuesPromise
  extends Promise<WordUsagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface WordUsagePreviousValuesSubscription
  extends Promise<AsyncIterator<WordUsagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Word",
    embedded: false
  },
  {
    name: "WordUsage",
    embedded: false
  },
  {
    name: "WordExample",
    embedded: false
  },
  {
    name: "Kanji",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
